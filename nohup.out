09/26 15:26:06 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.12 (main, Sep 11 2024, 15:47:36) [GCC 11.4.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 238111862
    GPU 0: NVIDIA GeForce RTX 4090
    CUDA_HOME: /usr/local/cuda-11.8
    NVCC: Cuda compilation tools, release 11.8, V11.8.89
    GCC: x86_64-linux-gnu-gcc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0
    PyTorch: 2.3.1+cu118
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201703
  - Intel(R) oneAPI Math Kernel Library Version 2022.2-Product Build 20220804 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.3.6 (Git Hash 86e6af5974177e513fd3fee58425e1063e7f1361)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.8
  - NVCC architecture flags: -gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_90,code=sm_90
  - CuDNN 8.7
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=8.7.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-stringop-overflow -Wsuggest-override -Wno-psabi -Wno-error=pedantic -Wno-error=old-style-cast -Wno-missing-braces -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=2.3.1, USE_CUDA=ON, USE_CUDNN=ON, USE_CUSPARSELT=1, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_GLOO=ON, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=1, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, USE_ROCM_KERNEL_ASSERT=OFF, 

    TorchVision: 0.18.1+cu118
    OpenCV: 4.10.0
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: False
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 238111862
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

09/26 15:26:07 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
class_balanced_osdar23_train_dataset = dict(
    dataset=dict(
        ann_file='kitti_infos_train.pkl',
        backend_args=None,
        data_prefix=dict(pts='points'),
        data_root='data/osdar23_3class/',
        metainfo=dict(classes=[
            'Pedestrian',
            'Cyclist',
            'Car',
        ]),
        modality=dict(use_camera=False, use_lidar=True),
        pipeline=[
            dict(
                backend_args=None,
                coord_type='LIDAR',
                load_dim=4,
                type='LoadPointsFromFile',
                use_dim=4),
            dict(
                type='LoadAnnotations3D',
                with_bbox_3d=True,
                with_label_3d=True),
            dict(
                db_sampler=dict(
                    backend_args=None,
                    classes=[
                        'Pedestrian',
                        'Cyclist',
                        'Car',
                    ],
                    data_root='data/osdar23_3class/',
                    info_path='data/osdar23_3class/kitti_dbinfos_train.pkl',
                    points_loader=dict(
                        backend_args=None,
                        coord_type='LIDAR',
                        load_dim=4,
                        type='LoadPointsFromFile',
                        use_dim=4),
                    prepare=dict(
                        filter_by_min_points=dict(
                            Car=20, Cyclist=20, Pedestrian=20)),
                    rate=1.0,
                    sample_groups=dict(Car=10, Cyclist=10, Pedestrian=10)),
                type='ObjectSample',
                use_ground_plane=False),
            dict(flip_ratio_bev_horizontal=0.5, type='RandomFlip3D'),
            dict(
                rot_range=[
                    -0.78539816,
                    0.78539816,
                ],
                scale_ratio_range=[
                    0.95,
                    1.05,
                ],
                type='GlobalRotScaleTrans'),
            dict(
                point_cloud_range=[
                    0,
                    -40,
                    -3,
                    70.4,
                    40,
                    1,
                ],
                type='PointsRangeFilter'),
            dict(
                point_cloud_range=[
                    0,
                    -40,
                    -3,
                    70.4,
                    40,
                    1,
                ],
                type='ObjectRangeFilter'),
            dict(type='PointShuffle'),
            dict(
                keys=[
                    'points',
                    'gt_labels_3d',
                    'gt_bboxes_3d',
                ],
                type='Pack3DDetInputs'),
        ],
        test_mode=False,
        type='OSDaR23Dataset'),
    oversample_thr=0.1,
    type='ClassBalancedDataset')
class_names = [
    'Pedestrian',
    'Cyclist',
    'Car',
]
custom_hooks = [
    dict(
        init_kwargs=dict(
            entity='railsensing',
            name='rtx4090_pvrcnn_run8_mixed_3class',
            project='pv-rcnn'),
        log_artifact=True,
        save_dir=
        '/home/cws-ml-lab/mmdetection3d_for_rail/checkpoints/rtx4090_pvrcnn_run8_mixed_3class',
        type='WandbLoggerHook',
        yaml_config_path='wandb_auth.yaml'),
]
custom_imports = dict(
    allow_failed_imports=False,
    imports=[
        'mmdet3d.datasets.osdar23_dataset',
        'mmdet3d.engine.hooks.wandb_logger_hook',
        'mmdet3d.evaluation.metrics.general_3ddet_metric_mmlab',
    ])
default_hooks = dict(
    checkpoint=dict(by_epoch=True, interval=1, type='CheckpointHook'),
    logger=dict(interval=100, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='Det3DVisualizationHook'))
default_scope = 'mmdet3d'
env_cfg = dict(
    cudnn_benchmark=False,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
epoch_num = 40
generic_eval_pipeline = [
    dict(type='LoadAnnotations3D', with_bbox_3d=True, with_label_3d=True),
    dict(
        backend_args=None,
        coord_type='LIDAR',
        load_dim=4,
        type='LoadPointsFromFile',
        use_dim=4),
    dict(
        flip=False,
        img_scale=(
            1333,
            800,
        ),
        pts_scale_ratio=1,
        transforms=[
            dict(
                rot_range=[
                    0,
                    0,
                ],
                scale_ratio_range=[
                    1.0,
                    1.0,
                ],
                translation_std=[
                    0,
                    0,
                    0,
                ],
                type='GlobalRotScaleTrans'),
            dict(type='RandomFlip3D'),
            dict(
                point_cloud_range=[
                    0,
                    -40,
                    -3,
                    70.4,
                    40,
                    1,
                ],
                type='PointsRangeFilter'),
        ],
        type='MultiScaleFlipAug3D'),
    dict(
        keys=[
            'points',
            'gt_bboxes_3d',
            'gt_labels_3d',
        ],
        type='Pack3DDetInputs'),
]
generic_test_pipeline = [
    dict(type='LoadAnnotations3D', with_bbox_3d=True, with_label_3d=True),
    dict(
        backend_args=None,
        coord_type='LIDAR',
        load_dim=4,
        type='LoadPointsFromFile',
        use_dim=4),
    dict(
        flip=False,
        img_scale=(
            1333,
            800,
        ),
        pts_scale_ratio=1,
        transforms=[
            dict(
                rot_range=[
                    0,
                    0,
                ],
                scale_ratio_range=[
                    1.0,
                    1.0,
                ],
                translation_std=[
                    0,
                    0,
                    0,
                ],
                type='GlobalRotScaleTrans'),
            dict(type='RandomFlip3D'),
            dict(
                point_cloud_range=[
                    0,
                    -40,
                    -3,
                    70.4,
                    40,
                    1,
                ],
                type='PointsRangeFilter'),
        ],
        type='MultiScaleFlipAug3D'),
    dict(
        keys=[
            'points',
            'gt_bboxes_3d',
            'gt_labels_3d',
        ],
        type='Pack3DDetInputs'),
]
input_modality = dict(use_camera=False, use_lidar=True)
kitti_data_root = 'data/kitti/'
kitti_dataset_type = 'KittiDataset'
kitti_db_sampler = dict(
    backend_args=None,
    classes=[
        'Pedestrian',
        'Cyclist',
        'Car',
    ],
    data_root='data/kitti/',
    info_path='data/kitti/kitti_dbinfos_train.pkl',
    points_loader=dict(
        backend_args=None,
        coord_type='LIDAR',
        load_dim=4,
        type='LoadPointsFromFile',
        use_dim=4),
    prepare=dict(
        filter_by_difficulty=[
            -1,
        ],
        filter_by_min_points=dict(Car=20, Cyclist=20, Pedestrian=20)),
    rate=1.0,
    sample_groups=dict(Car=10, Cyclist=10, Pedestrian=10))
kitti_repeat_dataset = dict(
    dataset=dict(
        ann_file='kitti_infos_train.pkl',
        backend_args=None,
        data_prefix=dict(pts='training/velodyne_reduced'),
        data_root='data/kitti/',
        metainfo=dict(classes=[
            'Pedestrian',
            'Cyclist',
            'Car',
        ]),
        modality=dict(use_camera=False, use_lidar=True),
        pipeline=[
            dict(
                backend_args=None,
                coord_type='LIDAR',
                load_dim=4,
                type='LoadPointsFromFile',
                use_dim=4),
            dict(
                type='LoadAnnotations3D',
                with_bbox_3d=True,
                with_label_3d=True),
            dict(
                db_sampler=dict(
                    backend_args=None,
                    classes=[
                        'Pedestrian',
                        'Cyclist',
                        'Car',
                    ],
                    data_root='data/kitti/',
                    info_path='data/kitti/kitti_dbinfos_train.pkl',
                    points_loader=dict(
                        backend_args=None,
                        coord_type='LIDAR',
                        load_dim=4,
                        type='LoadPointsFromFile',
                        use_dim=4),
                    prepare=dict(
                        filter_by_difficulty=[
                            -1,
                        ],
                        filter_by_min_points=dict(
                            Car=20, Cyclist=20, Pedestrian=20)),
                    rate=1.0,
                    sample_groups=dict(Car=10, Cyclist=10, Pedestrian=10)),
                type='ObjectSample'),
            dict(
                global_rot_range=[
                    0.0,
                    0.0,
                ],
                num_try=100,
                rot_range=[
                    -0.78539816,
                    0.78539816,
                ],
                translation_std=[
                    1.0,
                    1.0,
                    0.5,
                ],
                type='ObjectNoise'),
            dict(flip_ratio_bev_horizontal=0.5, type='RandomFlip3D'),
            dict(
                rot_range=[
                    -0.78539816,
                    0.78539816,
                ],
                scale_ratio_range=[
                    0.95,
                    1.05,
                ],
                type='GlobalRotScaleTrans'),
            dict(
                point_cloud_range=[
                    0,
                    -40,
                    -3,
                    70.4,
                    40,
                    1,
                ],
                type='PointsRangeFilter'),
            dict(
                point_cloud_range=[
                    0,
                    -40,
                    -3,
                    70.4,
                    40,
                    1,
                ],
                type='ObjectRangeFilter'),
            dict(type='PointShuffle'),
            dict(
                keys=[
                    'points',
                    'gt_bboxes_3d',
                    'gt_labels_3d',
                ],
                type='Pack3DDetInputs'),
        ],
        test_mode=False,
        type='KittiDataset'),
    times=1,
    type='RepeatDataset')
kitti_test_dataset = dict(
    ann_file='kitti_infos_val.pkl',
    backend_args=None,
    data_prefix=dict(pts='training/velodyne_reduced'),
    data_root='data/kitti/',
    indices=0.1,
    metainfo=dict(classes=[
        'Pedestrian',
        'Cyclist',
        'Car',
    ]),
    modality=dict(use_camera=False, use_lidar=True),
    pipeline=[
        dict(type='LoadAnnotations3D', with_bbox_3d=True, with_label_3d=True),
        dict(
            backend_args=None,
            coord_type='LIDAR',
            load_dim=4,
            type='LoadPointsFromFile',
            use_dim=4),
        dict(
            flip=False,
            img_scale=(
                1333,
                800,
            ),
            pts_scale_ratio=1,
            transforms=[
                dict(
                    rot_range=[
                        0,
                        0,
                    ],
                    scale_ratio_range=[
                        1.0,
                        1.0,
                    ],
                    translation_std=[
                        0,
                        0,
                        0,
                    ],
                    type='GlobalRotScaleTrans'),
                dict(type='RandomFlip3D'),
                dict(
                    point_cloud_range=[
                        0,
                        -40,
                        -3,
                        70.4,
                        40,
                        1,
                    ],
                    type='PointsRangeFilter'),
            ],
            type='MultiScaleFlipAug3D'),
        dict(
            keys=[
                'points',
                'gt_bboxes_3d',
                'gt_labels_3d',
            ],
            type='Pack3DDetInputs'),
    ],
    test_mode=True,
    type='KittiDataset')
kitti_train_dataset = dict(
    ann_file='kitti_infos_train.pkl',
    backend_args=None,
    data_prefix=dict(pts='training/velodyne_reduced'),
    data_root='data/kitti/',
    metainfo=dict(classes=[
        'Pedestrian',
        'Cyclist',
        'Car',
    ]),
    modality=dict(use_camera=False, use_lidar=True),
    pipeline=[
        dict(
            backend_args=None,
            coord_type='LIDAR',
            load_dim=4,
            type='LoadPointsFromFile',
            use_dim=4),
        dict(type='LoadAnnotations3D', with_bbox_3d=True, with_label_3d=True),
        dict(
            db_sampler=dict(
                backend_args=None,
                classes=[
                    'Pedestrian',
                    'Cyclist',
                    'Car',
                ],
                data_root='data/kitti/',
                info_path='data/kitti/kitti_dbinfos_train.pkl',
                points_loader=dict(
                    backend_args=None,
                    coord_type='LIDAR',
                    load_dim=4,
                    type='LoadPointsFromFile',
                    use_dim=4),
                prepare=dict(
                    filter_by_difficulty=[
                        -1,
                    ],
                    filter_by_min_points=dict(
                        Car=20, Cyclist=20, Pedestrian=20)),
                rate=1.0,
                sample_groups=dict(Car=10, Cyclist=10, Pedestrian=10)),
            type='ObjectSample'),
        dict(
            global_rot_range=[
                0.0,
                0.0,
            ],
            num_try=100,
            rot_range=[
                -0.78539816,
                0.78539816,
            ],
            translation_std=[
                1.0,
                1.0,
                0.5,
            ],
            type='ObjectNoise'),
        dict(flip_ratio_bev_horizontal=0.5, type='RandomFlip3D'),
        dict(
            rot_range=[
                -0.78539816,
                0.78539816,
            ],
            scale_ratio_range=[
                0.95,
                1.05,
            ],
            type='GlobalRotScaleTrans'),
        dict(
            point_cloud_range=[
                0,
                -40,
                -3,
                70.4,
                40,
                1,
            ],
            type='PointsRangeFilter'),
        dict(
            point_cloud_range=[
                0,
                -40,
                -3,
                70.4,
                40,
                1,
            ],
            type='ObjectRangeFilter'),
        dict(type='PointShuffle'),
        dict(
            keys=[
                'points',
                'gt_bboxes_3d',
                'gt_labels_3d',
            ],
            type='Pack3DDetInputs'),
    ],
    test_mode=False,
    type='KittiDataset')
kitti_train_pipeline = [
    dict(
        backend_args=None,
        coord_type='LIDAR',
        load_dim=4,
        type='LoadPointsFromFile',
        use_dim=4),
    dict(type='LoadAnnotations3D', with_bbox_3d=True, with_label_3d=True),
    dict(
        db_sampler=dict(
            backend_args=None,
            classes=[
                'Pedestrian',
                'Cyclist',
                'Car',
            ],
            data_root='data/kitti/',
            info_path='data/kitti/kitti_dbinfos_train.pkl',
            points_loader=dict(
                backend_args=None,
                coord_type='LIDAR',
                load_dim=4,
                type='LoadPointsFromFile',
                use_dim=4),
            prepare=dict(
                filter_by_difficulty=[
                    -1,
                ],
                filter_by_min_points=dict(Car=20, Cyclist=20, Pedestrian=20)),
            rate=1.0,
            sample_groups=dict(Car=10, Cyclist=10, Pedestrian=10)),
        type='ObjectSample'),
    dict(
        global_rot_range=[
            0.0,
            0.0,
        ],
        num_try=100,
        rot_range=[
            -0.78539816,
            0.78539816,
        ],
        translation_std=[
            1.0,
            1.0,
            0.5,
        ],
        type='ObjectNoise'),
    dict(flip_ratio_bev_horizontal=0.5, type='RandomFlip3D'),
    dict(
        rot_range=[
            -0.78539816,
            0.78539816,
        ],
        scale_ratio_range=[
            0.95,
            1.05,
        ],
        type='GlobalRotScaleTrans'),
    dict(
        point_cloud_range=[
            0,
            -40,
            -3,
            70.4,
            40,
            1,
        ],
        type='PointsRangeFilter'),
    dict(
        point_cloud_range=[
            0,
            -40,
            -3,
            70.4,
            40,
            1,
        ],
        type='ObjectRangeFilter'),
    dict(type='PointShuffle'),
    dict(
        keys=[
            'points',
            'gt_bboxes_3d',
            'gt_labels_3d',
        ],
        type='Pack3DDetInputs'),
]
kitti_val_dataset = dict(
    ann_file='kitti_infos_val.pkl',
    backend_args=None,
    data_prefix=dict(pts='training/velodyne_reduced'),
    data_root='data/kitti/',
    indices=0.1,
    metainfo=dict(classes=[
        'Pedestrian',
        'Cyclist',
        'Car',
    ]),
    modality=dict(use_camera=False, use_lidar=True),
    pipeline=[
        dict(type='LoadAnnotations3D', with_bbox_3d=True, with_label_3d=True),
        dict(
            backend_args=None,
            coord_type='LIDAR',
            load_dim=4,
            type='LoadPointsFromFile',
            use_dim=4),
        dict(
            flip=False,
            img_scale=(
                1333,
                800,
            ),
            pts_scale_ratio=1,
            transforms=[
                dict(
                    rot_range=[
                        0,
                        0,
                    ],
                    scale_ratio_range=[
                        1.0,
                        1.0,
                    ],
                    translation_std=[
                        0,
                        0,
                        0,
                    ],
                    type='GlobalRotScaleTrans'),
                dict(type='RandomFlip3D'),
                dict(
                    point_cloud_range=[
                        0,
                        -40,
                        -3,
                        70.4,
                        40,
                        1,
                    ],
                    type='PointsRangeFilter'),
            ],
            type='MultiScaleFlipAug3D'),
        dict(
            keys=[
                'points',
                'gt_bboxes_3d',
                'gt_labels_3d',
            ],
            type='Pack3DDetInputs'),
    ],
    test_mode=True,
    type='KittiDataset')
launcher = 'none'
load_from = None
log_level = 'INFO'
log_processor = dict(by_epoch=True, type='LogProcessor', window_size=50)
lr = 0.001
metainfo = dict(classes=[
    'Pedestrian',
    'Cyclist',
    'Car',
])
model = dict(
    backbone=dict(
        in_channels=256,
        layer_nums=[
            5,
            5,
        ],
        layer_strides=[
            1,
            2,
        ],
        out_channels=[
            128,
            256,
        ],
        type='SECOND'),
    data_preprocessor=dict(
        type='Det3DDataPreprocessor',
        voxel=True,
        voxel_layer=dict(
            max_num_points=20,
            max_voxels=(
                16000,
                40000,
            ),
            point_cloud_range=[
                0,
                -40,
                -3,
                70.4,
                40,
                1,
            ],
            voxel_size=[
                0.05,
                0.05,
                0.1,
            ])),
    middle_encoder=dict(
        encoder_paddings=(
            (
                0,
                0,
                0,
            ),
            (
                (
                    1,
                    1,
                    1,
                ),
                0,
                0,
            ),
            (
                (
                    1,
                    1,
                    1,
                ),
                0,
                0,
            ),
            (
                (
                    0,
                    1,
                    1,
                ),
                0,
                0,
            ),
        ),
        in_channels=4,
        order=(
            'conv',
            'norm',
            'act',
        ),
        return_middle_feats=True,
        sparse_shape=[
            41,
            1600,
            1408,
        ],
        type='SparseEncoder'),
    neck=dict(
        in_channels=[
            128,
            256,
        ],
        out_channels=[
            256,
            256,
        ],
        type='SECONDFPN',
        upsample_strides=[
            1,
            2,
        ]),
    points_encoder=dict(
        bev_feat_channel=256,
        bev_scale_factor=8,
        fused_out_channel=128,
        num_keypoints=2048,
        point_cloud_range=[
            0,
            -40,
            -3,
            70.4,
            40,
            1,
        ],
        rawpoints_sa_cfgs=dict(
            in_channels=1,
            mlp_channels=(
                (
                    16,
                    16,
                ),
                (
                    16,
                    16,
                ),
            ),
            radius=(
                0.4,
                0.8,
            ),
            sample_nums=(
                16,
                16,
            ),
            type='StackedSAModuleMSG',
            use_xyz=True),
        type='VoxelSetAbstraction',
        voxel_sa_cfgs_list=[
            dict(
                in_channels=16,
                mlp_channels=(
                    (
                        16,
                        16,
                    ),
                    (
                        16,
                        16,
                    ),
                ),
                radius=(
                    0.4,
                    0.8,
                ),
                sample_nums=(
                    16,
                    16,
                ),
                scale_factor=1,
                type='StackedSAModuleMSG',
                use_xyz=True),
            dict(
                in_channels=32,
                mlp_channels=(
                    (
                        32,
                        32,
                    ),
                    (
                        32,
                        32,
                    ),
                ),
                radius=(
                    0.8,
                    1.2,
                ),
                sample_nums=(
                    16,
                    32,
                ),
                scale_factor=2,
                type='StackedSAModuleMSG',
                use_xyz=True),
            dict(
                in_channels=64,
                mlp_channels=(
                    (
                        64,
                        64,
                    ),
                    (
                        64,
                        64,
                    ),
                ),
                radius=(
                    1.2,
                    2.4,
                ),
                sample_nums=(
                    16,
                    32,
                ),
                scale_factor=4,
                type='StackedSAModuleMSG',
                use_xyz=True),
            dict(
                in_channels=64,
                mlp_channels=(
                    (
                        64,
                        64,
                    ),
                    (
                        64,
                        64,
                    ),
                ),
                radius=(
                    2.4,
                    4.8,
                ),
                sample_nums=(
                    16,
                    32,
                ),
                scale_factor=8,
                type='StackedSAModuleMSG',
                use_xyz=True),
        ],
        voxel_size=[
            0.05,
            0.05,
            0.1,
        ]),
    roi_head=dict(
        bbox_head=dict(
            bbox_coder=dict(type='DeltaXYZWLHRBBoxCoder'),
            class_agnostic=True,
            cls_channels=(
                256,
                256,
            ),
            dropout_ratio=0.3,
            grid_size=6,
            in_channels=128,
            loss_bbox=dict(
                beta=0.1111111111111111,
                loss_weight=1.0,
                reduction='sum',
                type='mmdet.SmoothL1Loss'),
            loss_cls=dict(
                loss_weight=1.0,
                reduction='sum',
                type='mmdet.CrossEntropyLoss',
                use_sigmoid=True),
            num_classes=4,
            reg_channels=(
                256,
                256,
            ),
            shared_fc_channels=(
                256,
                256,
            ),
            type='PVRCNNBBoxHead',
            with_corner_loss=True),
        bbox_roi_extractor=dict(
            grid_size=6,
            roi_layer=dict(
                in_channels=128,
                mlp_channels=(
                    (
                        64,
                        64,
                    ),
                    (
                        64,
                        64,
                    ),
                ),
                pool_mod='max',
                radius=(
                    0.8,
                    1.6,
                ),
                sample_nums=(
                    16,
                    16,
                ),
                type='StackedSAModuleMSG',
                use_xyz=True),
            type='Batch3DRoIGridExtractor'),
        num_classes=4,
        semantic_head=dict(
            extra_width=0.1,
            in_channels=640,
            loss_seg=dict(
                activated=True,
                alpha=0.25,
                gamma=2.0,
                loss_weight=1.0,
                reduction='sum',
                type='mmdet.FocalLoss',
                use_sigmoid=True),
            type='ForegroundSegmentationHead'),
        type='PVRCNNRoiHead'),
    rpn_head=dict(
        anchor_generator=dict(
            ranges=[
                [
                    0,
                    -40.0,
                    -0.6,
                    70.4,
                    40.0,
                    -0.6,
                ],
                [
                    0,
                    -40.0,
                    -0.6,
                    70.4,
                    40.0,
                    -0.6,
                ],
                [
                    0,
                    -40.0,
                    -1.78,
                    70.4,
                    40.0,
                    -1.78,
                ],
            ],
            reshape_out=False,
            rotations=[
                0,
                1.57,
            ],
            sizes=[
                [
                    0.85,
                    0.73,
                    1.81,
                ],
                [
                    1.74,
                    0.74,
                    1.45,
                ],
                [
                    4.1,
                    2.25,
                    2.1,
                ],
            ],
            type='Anchor3DRangeGenerator'),
        assign_per_class=True,
        assigner_per_size=True,
        bbox_coder=dict(type='DeltaXYZWLHRBBoxCoder'),
        diff_rad_by_sin=True,
        dir_offset=0.78539,
        feat_channels=512,
        in_channels=512,
        loss_bbox=dict(
            beta=0.1111111111111111,
            loss_weight=2.0,
            type='mmdet.SmoothL1Loss'),
        loss_cls=dict(
            alpha=0.25,
            gamma=2.0,
            loss_weight=1.0,
            type='mmdet.FocalLoss',
            use_sigmoid=True),
        loss_dir=dict(
            loss_weight=0.2, type='mmdet.CrossEntropyLoss', use_sigmoid=False),
        num_classes=4,
        type='PartA2RPNHead',
        use_direction_classifier=True),
    test_cfg=dict(
        rcnn=dict(
            nms_thr=0.1,
            score_thr=0.1,
            use_raw_score=True,
            use_rotate_nms=True),
        rpn=dict(
            max_num=100,
            nms_post=100,
            nms_pre=1024,
            nms_thr=0.7,
            score_thr=0,
            use_rotate_nms=True)),
    train_cfg=dict(
        rcnn=dict(
            assigner=[
                dict(
                    ignore_iof_thr=-1,
                    iou_calculator=dict(
                        coordinate='lidar', type='BboxOverlaps3D'),
                    min_pos_iou=0.55,
                    neg_iou_thr=0.55,
                    pos_iou_thr=0.55,
                    type='Max3DIoUAssigner'),
                dict(
                    ignore_iof_thr=-1,
                    iou_calculator=dict(
                        coordinate='lidar', type='BboxOverlaps3D'),
                    min_pos_iou=0.55,
                    neg_iou_thr=0.55,
                    pos_iou_thr=0.55,
                    type='Max3DIoUAssigner'),
                dict(
                    ignore_iof_thr=-1,
                    iou_calculator=dict(
                        coordinate='lidar', type='BboxOverlaps3D'),
                    min_pos_iou=0.55,
                    neg_iou_thr=0.55,
                    pos_iou_thr=0.55,
                    type='Max3DIoUAssigner'),
            ],
            cls_neg_thr=0.25,
            cls_pos_thr=0.75,
            sampler=dict(
                add_gt_as_proposals=False,
                neg_iou_piece_thrs=[
                    0.55,
                    0.1,
                ],
                neg_piece_fractions=[
                    0.8,
                    0.2,
                ],
                neg_pos_ub=-1,
                num=128,
                pos_fraction=0.5,
                return_iou=True,
                type='IoUNegPiecewiseSampler')),
        rpn=dict(
            allowed_border=0,
            assigner=[
                dict(
                    ignore_iof_thr=-1,
                    iou_calculator=dict(type='mmdet3d.BboxOverlapsNearest3D'),
                    min_pos_iou=0.35,
                    neg_iou_thr=0.35,
                    pos_iou_thr=0.5,
                    type='Max3DIoUAssigner'),
                dict(
                    ignore_iof_thr=-1,
                    iou_calculator=dict(type='mmdet3d.BboxOverlapsNearest3D'),
                    min_pos_iou=0.35,
                    neg_iou_thr=0.35,
                    pos_iou_thr=0.5,
                    type='Max3DIoUAssigner'),
                dict(
                    ignore_iof_thr=-1,
                    iou_calculator=dict(type='mmdet3d.BboxOverlapsNearest3D'),
                    min_pos_iou=0.35,
                    neg_iou_thr=0.35,
                    pos_iou_thr=0.5,
                    type='Max3DIoUAssigner'),
            ],
            debug=False,
            pos_weight=-1),
        rpn_proposal=dict(
            max_num=512,
            nms_post=512,
            nms_pre=9000,
            nms_thr=0.8,
            score_thr=0,
            use_rotate_nms=True)),
    type='PointVoxelRCNN',
    voxel_encoder=dict(type='HardSimpleVFE'))
optim_wrapper = dict(
    clip_grad=dict(max_norm=10, norm_type=2),
    optimizer=dict(
        betas=(
            0.95,
            0.99,
        ), lr=0.001, type='AdamW', weight_decay=0.01),
    type='OptimWrapper')
osdar23_data_root = 'data/osdar23_3class/'
osdar23_dataset = dict(type='OSDaR23Dataset')
osdar23_dataset_type = 'OSDaR23Dataset'
osdar23_db_sampler = dict(
    backend_args=None,
    classes=[
        'Pedestrian',
        'Cyclist',
        'Car',
    ],
    data_root='data/osdar23_3class/',
    info_path='data/osdar23_3class/kitti_dbinfos_train.pkl',
    points_loader=dict(
        backend_args=None,
        coord_type='LIDAR',
        load_dim=4,
        type='LoadPointsFromFile',
        use_dim=4),
    prepare=dict(filter_by_min_points=dict(Car=20, Cyclist=20, Pedestrian=20)),
    rate=1.0,
    sample_groups=dict(Car=10, Cyclist=10, Pedestrian=10))
osdar23_train_dataset = dict(
    ann_file='kitti_infos_train.pkl',
    backend_args=None,
    data_prefix=dict(pts='points'),
    data_root='data/osdar23_3class/',
    metainfo=dict(classes=[
        'Pedestrian',
        'Cyclist',
        'Car',
    ]),
    modality=dict(use_camera=False, use_lidar=True),
    pipeline=[
        dict(
            backend_args=None,
            coord_type='LIDAR',
            load_dim=4,
            type='LoadPointsFromFile',
            use_dim=4),
        dict(type='LoadAnnotations3D', with_bbox_3d=True, with_label_3d=True),
        dict(
            db_sampler=dict(
                backend_args=None,
                classes=[
                    'Pedestrian',
                    'Cyclist',
                    'Car',
                ],
                data_root='data/osdar23_3class/',
                info_path='data/osdar23_3class/kitti_dbinfos_train.pkl',
                points_loader=dict(
                    backend_args=None,
                    coord_type='LIDAR',
                    load_dim=4,
                    type='LoadPointsFromFile',
                    use_dim=4),
                prepare=dict(
                    filter_by_min_points=dict(
                        Car=20, Cyclist=20, Pedestrian=20)),
                rate=1.0,
                sample_groups=dict(Car=10, Cyclist=10, Pedestrian=10)),
            type='ObjectSample',
            use_ground_plane=False),
        dict(flip_ratio_bev_horizontal=0.5, type='RandomFlip3D'),
        dict(
            rot_range=[
                -0.78539816,
                0.78539816,
            ],
            scale_ratio_range=[
                0.95,
                1.05,
            ],
            type='GlobalRotScaleTrans'),
        dict(
            point_cloud_range=[
                0,
                -40,
                -3,
                70.4,
                40,
                1,
            ],
            type='PointsRangeFilter'),
        dict(
            point_cloud_range=[
                0,
                -40,
                -3,
                70.4,
                40,
                1,
            ],
            type='ObjectRangeFilter'),
        dict(type='PointShuffle'),
        dict(
            keys=[
                'points',
                'gt_labels_3d',
                'gt_bboxes_3d',
            ],
            type='Pack3DDetInputs'),
    ],
    test_mode=False,
    type='OSDaR23Dataset')
osdar23_train_pipeline = [
    dict(
        backend_args=None,
        coord_type='LIDAR',
        load_dim=4,
        type='LoadPointsFromFile',
        use_dim=4),
    dict(type='LoadAnnotations3D', with_bbox_3d=True, with_label_3d=True),
    dict(
        db_sampler=dict(
            backend_args=None,
            classes=[
                'Pedestrian',
                'Cyclist',
                'Car',
            ],
            data_root='data/osdar23_3class/',
            info_path='data/osdar23_3class/kitti_dbinfos_train.pkl',
            points_loader=dict(
                backend_args=None,
                coord_type='LIDAR',
                load_dim=4,
                type='LoadPointsFromFile',
                use_dim=4),
            prepare=dict(
                filter_by_min_points=dict(Car=20, Cyclist=20, Pedestrian=20)),
            rate=1.0,
            sample_groups=dict(Car=10, Cyclist=10, Pedestrian=10)),
        type='ObjectSample',
        use_ground_plane=False),
    dict(flip_ratio_bev_horizontal=0.5, type='RandomFlip3D'),
    dict(
        rot_range=[
            -0.78539816,
            0.78539816,
        ],
        scale_ratio_range=[
            0.95,
            1.05,
        ],
        type='GlobalRotScaleTrans'),
    dict(
        point_cloud_range=[
            0,
            -40,
            -3,
            70.4,
            40,
            1,
        ],
        type='PointsRangeFilter'),
    dict(
        point_cloud_range=[
            0,
            -40,
            -3,
            70.4,
            40,
            1,
        ],
        type='ObjectRangeFilter'),
    dict(type='PointShuffle'),
    dict(
        keys=[
            'points',
            'gt_labels_3d',
            'gt_bboxes_3d',
        ],
        type='Pack3DDetInputs'),
]
osdar23_val_dataset = dict(
    ann_file='kitti_infos_val.pkl',
    backend_args=None,
    data_prefix=dict(pts='points'),
    data_root='data/osdar23_3class/',
    metainfo=dict(classes=[
        'Pedestrian',
        'Cyclist',
        'Car',
    ]),
    modality=dict(use_camera=False, use_lidar=True),
    pipeline=[
        dict(type='LoadAnnotations3D', with_bbox_3d=True, with_label_3d=True),
        dict(
            backend_args=None,
            coord_type='LIDAR',
            load_dim=4,
            type='LoadPointsFromFile',
            use_dim=4),
        dict(
            flip=False,
            img_scale=(
                1333,
                800,
            ),
            pts_scale_ratio=1,
            transforms=[
                dict(
                    rot_range=[
                        0,
                        0,
                    ],
                    scale_ratio_range=[
                        1.0,
                        1.0,
                    ],
                    translation_std=[
                        0,
                        0,
                        0,
                    ],
                    type='GlobalRotScaleTrans'),
                dict(type='RandomFlip3D'),
                dict(
                    point_cloud_range=[
                        0,
                        -40,
                        -3,
                        70.4,
                        40,
                        1,
                    ],
                    type='PointsRangeFilter'),
            ],
            type='MultiScaleFlipAug3D'),
        dict(
            keys=[
                'points',
                'gt_bboxes_3d',
                'gt_labels_3d',
            ],
            type='Pack3DDetInputs'),
    ],
    test_mode=True,
    type='OSDaR23Dataset')
param_scheduler = [
    dict(
        T_max=16.0,
        begin=0,
        by_epoch=True,
        convert_to_iter_based=True,
        end=16.0,
        eta_min=0.01,
        type='CosineAnnealingLR'),
    dict(
        T_max=24.0,
        begin=16.0,
        by_epoch=True,
        convert_to_iter_based=True,
        end=40.0,
        eta_min=1.0000000000000001e-07,
        type='CosineAnnealingLR'),
    dict(
        T_max=16.0,
        begin=0,
        by_epoch=True,
        convert_to_iter_based=True,
        end=16.0,
        eta_min=0.8947368421052632,
        type='CosineAnnealingMomentum'),
    dict(
        T_max=24.0,
        begin=16.0,
        by_epoch=True,
        convert_to_iter_based=True,
        end=40.0,
        eta_min=1,
        type='CosineAnnealingMomentum'),
]
point_cloud_range = [
    0,
    -40,
    -3,
    70.4,
    40,
    1,
]
point_cloud_range_inference = [
    0,
    -40,
    -3,
    70.4,
    40,
    1,
]
points_loader = dict(
    backend_args=None,
    coord_type='LIDAR',
    load_dim=4,
    type='LoadPointsFromFile',
    use_dim=4)
repeat_osdar23_train_dataset = dict(
    dataset=dict(
        ann_file='kitti_infos_train.pkl',
        backend_args=None,
        data_prefix=dict(pts='points'),
        data_root='data/osdar23_3class/',
        metainfo=dict(classes=[
            'Pedestrian',
            'Cyclist',
            'Car',
        ]),
        modality=dict(use_camera=False, use_lidar=True),
        pipeline=[
            dict(
                backend_args=None,
                coord_type='LIDAR',
                load_dim=4,
                type='LoadPointsFromFile',
                use_dim=4),
            dict(
                type='LoadAnnotations3D',
                with_bbox_3d=True,
                with_label_3d=True),
            dict(
                db_sampler=dict(
                    backend_args=None,
                    classes=[
                        'Pedestrian',
                        'Cyclist',
                        'Car',
                    ],
                    data_root='data/osdar23_3class/',
                    info_path='data/osdar23_3class/kitti_dbinfos_train.pkl',
                    points_loader=dict(
                        backend_args=None,
                        coord_type='LIDAR',
                        load_dim=4,
                        type='LoadPointsFromFile',
                        use_dim=4),
                    prepare=dict(
                        filter_by_min_points=dict(
                            Car=20, Cyclist=20, Pedestrian=20)),
                    rate=1.0,
                    sample_groups=dict(Car=10, Cyclist=10, Pedestrian=10)),
                type='ObjectSample',
                use_ground_plane=False),
            dict(flip_ratio_bev_horizontal=0.5, type='RandomFlip3D'),
            dict(
                rot_range=[
                    -0.78539816,
                    0.78539816,
                ],
                scale_ratio_range=[
                    0.95,
                    1.05,
                ],
                type='GlobalRotScaleTrans'),
            dict(
                point_cloud_range=[
                    0,
                    -40,
                    -3,
                    70.4,
                    40,
                    1,
                ],
                type='PointsRangeFilter'),
            dict(
                point_cloud_range=[
                    0,
                    -40,
                    -3,
                    70.4,
                    40,
                    1,
                ],
                type='ObjectRangeFilter'),
            dict(type='PointShuffle'),
            dict(
                keys=[
                    'points',
                    'gt_labels_3d',
                    'gt_bboxes_3d',
                ],
                type='Pack3DDetInputs'),
        ],
        test_mode=False,
        type='OSDaR23Dataset'),
    times=2,
    type='RepeatDataset')
resume = False
size_compromise = [
    [
        0.85,
        0.73,
        1.81,
    ],
    [
        1.74,
        0.74,
        1.45,
    ],
    [
        4.1,
        2.25,
        2.1,
    ],
]
test_cfg = dict()
test_dataloader = dict(
    batch_size=2,
    dataset=dict(
        datasets=[
            dict(
                ann_file='kitti_infos_val.pkl',
                backend_args=None,
                data_prefix=dict(pts='points'),
                data_root='data/osdar23_3class/',
                metainfo=dict(classes=[
                    'Pedestrian',
                    'Cyclist',
                    'Car',
                ]),
                modality=dict(use_camera=False, use_lidar=True),
                pipeline=[
                    dict(
                        type='LoadAnnotations3D',
                        with_bbox_3d=True,
                        with_label_3d=True),
                    dict(
                        backend_args=None,
                        coord_type='LIDAR',
                        load_dim=4,
                        type='LoadPointsFromFile',
                        use_dim=4),
                    dict(
                        flip=False,
                        img_scale=(
                            1333,
                            800,
                        ),
                        pts_scale_ratio=1,
                        transforms=[
                            dict(
                                rot_range=[
                                    0,
                                    0,
                                ],
                                scale_ratio_range=[
                                    1.0,
                                    1.0,
                                ],
                                translation_std=[
                                    0,
                                    0,
                                    0,
                                ],
                                type='GlobalRotScaleTrans'),
                            dict(type='RandomFlip3D'),
                            dict(
                                point_cloud_range=[
                                    0,
                                    -40,
                                    -3,
                                    70.4,
                                    40,
                                    1,
                                ],
                                type='PointsRangeFilter'),
                        ],
                        type='MultiScaleFlipAug3D'),
                    dict(
                        keys=[
                            'points',
                            'gt_bboxes_3d',
                            'gt_labels_3d',
                        ],
                        type='Pack3DDetInputs'),
                ],
                test_mode=True,
                type='OSDaR23Dataset'),
            dict(
                ann_file='kitti_infos_val.pkl',
                backend_args=None,
                data_prefix=dict(pts='training/velodyne_reduced'),
                data_root='data/kitti/',
                indices=0.1,
                metainfo=dict(classes=[
                    'Pedestrian',
                    'Cyclist',
                    'Car',
                ]),
                modality=dict(use_camera=False, use_lidar=True),
                pipeline=[
                    dict(
                        type='LoadAnnotations3D',
                        with_bbox_3d=True,
                        with_label_3d=True),
                    dict(
                        backend_args=None,
                        coord_type='LIDAR',
                        load_dim=4,
                        type='LoadPointsFromFile',
                        use_dim=4),
                    dict(
                        flip=False,
                        img_scale=(
                            1333,
                            800,
                        ),
                        pts_scale_ratio=1,
                        transforms=[
                            dict(
                                rot_range=[
                                    0,
                                    0,
                                ],
                                scale_ratio_range=[
                                    1.0,
                                    1.0,
                                ],
                                translation_std=[
                                    0,
                                    0,
                                    0,
                                ],
                                type='GlobalRotScaleTrans'),
                            dict(type='RandomFlip3D'),
                            dict(
                                point_cloud_range=[
                                    0,
                                    -40,
                                    -3,
                                    70.4,
                                    40,
                                    1,
                                ],
                                type='PointsRangeFilter'),
                        ],
                        type='MultiScaleFlipAug3D'),
                    dict(
                        keys=[
                            'points',
                            'gt_bboxes_3d',
                            'gt_labels_3d',
                        ],
                        type='Pack3DDetInputs'),
                ],
                test_mode=True,
                type='KittiDataset'),
        ],
        shuffle=True,
        type='ConcatDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    classes=[
        'Pedestrian',
        'Cyclist',
        'Car',
    ],
    metric='det3d',
    output_dir=
    '/home/cws-ml-lab/mmdetection3d_for_rail/checkpoints/rtx4090_pvrcnn_run8_mixed_3class',
    pcd_limit_range=[
        0,
        -40,
        -3,
        70.4,
        40,
        1,
    ],
    random_viz_keys=None,
    save_evaluation_results=True,
    save_graphics=False,
    save_random_viz=False,
    type='General_3dDet_Metric_MMLab')
train_cfg = dict(by_epoch=True, max_epochs=40, val_interval=5)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        datasets=[
            dict(
                dataset=dict(
                    ann_file='kitti_infos_train.pkl',
                    backend_args=None,
                    data_prefix=dict(pts='points'),
                    data_root='data/osdar23_3class/',
                    metainfo=dict(classes=[
                        'Pedestrian',
                        'Cyclist',
                        'Car',
                    ]),
                    modality=dict(use_camera=False, use_lidar=True),
                    pipeline=[
                        dict(
                            backend_args=None,
                            coord_type='LIDAR',
                            load_dim=4,
                            type='LoadPointsFromFile',
                            use_dim=4),
                        dict(
                            type='LoadAnnotations3D',
                            with_bbox_3d=True,
                            with_label_3d=True),
                        dict(
                            db_sampler=dict(
                                backend_args=None,
                                classes=[
                                    'Pedestrian',
                                    'Cyclist',
                                    'Car',
                                ],
                                data_root='data/osdar23_3class/',
                                info_path=
                                'data/osdar23_3class/kitti_dbinfos_train.pkl',
                                points_loader=dict(
                                    backend_args=None,
                                    coord_type='LIDAR',
                                    load_dim=4,
                                    type='LoadPointsFromFile',
                                    use_dim=4),
                                prepare=dict(
                                    filter_by_min_points=dict(
                                        Car=20, Cyclist=20, Pedestrian=20)),
                                rate=1.0,
                                sample_groups=dict(
                                    Car=10, Cyclist=10, Pedestrian=10)),
                            type='ObjectSample',
                            use_ground_plane=False),
                        dict(
                            flip_ratio_bev_horizontal=0.5,
                            type='RandomFlip3D'),
                        dict(
                            rot_range=[
                                -0.78539816,
                                0.78539816,
                            ],
                            scale_ratio_range=[
                                0.95,
                                1.05,
                            ],
                            type='GlobalRotScaleTrans'),
                        dict(
                            point_cloud_range=[
                                0,
                                -40,
                                -3,
                                70.4,
                                40,
                                1,
                            ],
                            type='PointsRangeFilter'),
                        dict(
                            point_cloud_range=[
                                0,
                                -40,
                                -3,
                                70.4,
                                40,
                                1,
                            ],
                            type='ObjectRangeFilter'),
                        dict(type='PointShuffle'),
                        dict(
                            keys=[
                                'points',
                                'gt_labels_3d',
                                'gt_bboxes_3d',
                            ],
                            type='Pack3DDetInputs'),
                    ],
                    test_mode=False,
                    type='OSDaR23Dataset'),
                oversample_thr=0.1,
                type='ClassBalancedDataset'),
            dict(
                ann_file='kitti_infos_train.pkl',
                backend_args=None,
                data_prefix=dict(pts='training/velodyne_reduced'),
                data_root='data/kitti/',
                metainfo=dict(classes=[
                    'Pedestrian',
                    'Cyclist',
                    'Car',
                ]),
                modality=dict(use_camera=False, use_lidar=True),
                pipeline=[
                    dict(
                        backend_args=None,
                        coord_type='LIDAR',
                        load_dim=4,
                        type='LoadPointsFromFile',
                        use_dim=4),
                    dict(
                        type='LoadAnnotations3D',
                        with_bbox_3d=True,
                        with_label_3d=True),
                    dict(
                        db_sampler=dict(
                            backend_args=None,
                            classes=[
                                'Pedestrian',
                                'Cyclist',
                                'Car',
                            ],
                            data_root='data/kitti/',
                            info_path='data/kitti/kitti_dbinfos_train.pkl',
                            points_loader=dict(
                                backend_args=None,
                                coord_type='LIDAR',
                                load_dim=4,
                                type='LoadPointsFromFile',
                                use_dim=4),
                            prepare=dict(
                                filter_by_difficulty=[
                                    -1,
                                ],
                                filter_by_min_points=dict(
                                    Car=20, Cyclist=20, Pedestrian=20)),
                            rate=1.0,
                            sample_groups=dict(
                                Car=10, Cyclist=10, Pedestrian=10)),
                        type='ObjectSample'),
                    dict(
                        global_rot_range=[
                            0.0,
                            0.0,
                        ],
                        num_try=100,
                        rot_range=[
                            -0.78539816,
                            0.78539816,
                        ],
                        translation_std=[
                            1.0,
                            1.0,
                            0.5,
                        ],
                        type='ObjectNoise'),
                    dict(flip_ratio_bev_horizontal=0.5, type='RandomFlip3D'),
                    dict(
                        rot_range=[
                            -0.78539816,
                            0.78539816,
                        ],
                        scale_ratio_range=[
                            0.95,
                            1.05,
                        ],
                        type='GlobalRotScaleTrans'),
                    dict(
                        point_cloud_range=[
                            0,
                            -40,
                            -3,
                            70.4,
                            40,
                            1,
                        ],
                        type='PointsRangeFilter'),
                    dict(
                        point_cloud_range=[
                            0,
                            -40,
                            -3,
                            70.4,
                            40,
                            1,
                        ],
                        type='ObjectRangeFilter'),
                    dict(type='PointShuffle'),
                    dict(
                        keys=[
                            'points',
                            'gt_bboxes_3d',
                            'gt_labels_3d',
                        ],
                        type='Pack3DDetInputs'),
                ],
                test_mode=False,
                type='KittiDataset'),
        ],
        shuffle=True,
        type='ConcatDataset'),
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
val_cfg = dict()
val_dataloader = dict(
    batch_size=2,
    dataset=dict(
        datasets=[
            dict(
                ann_file='kitti_infos_val.pkl',
                backend_args=None,
                data_prefix=dict(pts='points'),
                data_root='data/osdar23_3class/',
                metainfo=dict(classes=[
                    'Pedestrian',
                    'Cyclist',
                    'Car',
                ]),
                modality=dict(use_camera=False, use_lidar=True),
                pipeline=[
                    dict(
                        type='LoadAnnotations3D',
                        with_bbox_3d=True,
                        with_label_3d=True),
                    dict(
                        backend_args=None,
                        coord_type='LIDAR',
                        load_dim=4,
                        type='LoadPointsFromFile',
                        use_dim=4),
                    dict(
                        flip=False,
                        img_scale=(
                            1333,
                            800,
                        ),
                        pts_scale_ratio=1,
                        transforms=[
                            dict(
                                rot_range=[
                                    0,
                                    0,
                                ],
                                scale_ratio_range=[
                                    1.0,
                                    1.0,
                                ],
                                translation_std=[
                                    0,
                                    0,
                                    0,
                                ],
                                type='GlobalRotScaleTrans'),
                            dict(type='RandomFlip3D'),
                            dict(
                                point_cloud_range=[
                                    0,
                                    -40,
                                    -3,
                                    70.4,
                                    40,
                                    1,
                                ],
                                type='PointsRangeFilter'),
                        ],
                        type='MultiScaleFlipAug3D'),
                    dict(
                        keys=[
                            'points',
                            'gt_bboxes_3d',
                            'gt_labels_3d',
                        ],
                        type='Pack3DDetInputs'),
                ],
                test_mode=True,
                type='OSDaR23Dataset'),
            dict(
                ann_file='kitti_infos_val.pkl',
                backend_args=None,
                data_prefix=dict(pts='training/velodyne_reduced'),
                data_root='data/kitti/',
                indices=0.1,
                metainfo=dict(classes=[
                    'Pedestrian',
                    'Cyclist',
                    'Car',
                ]),
                modality=dict(use_camera=False, use_lidar=True),
                pipeline=[
                    dict(
                        type='LoadAnnotations3D',
                        with_bbox_3d=True,
                        with_label_3d=True),
                    dict(
                        backend_args=None,
                        coord_type='LIDAR',
                        load_dim=4,
                        type='LoadPointsFromFile',
                        use_dim=4),
                    dict(
                        flip=False,
                        img_scale=(
                            1333,
                            800,
                        ),
                        pts_scale_ratio=1,
                        transforms=[
                            dict(
                                rot_range=[
                                    0,
                                    0,
                                ],
                                scale_ratio_range=[
                                    1.0,
                                    1.0,
                                ],
                                translation_std=[
                                    0,
                                    0,
                                    0,
                                ],
                                type='GlobalRotScaleTrans'),
                            dict(type='RandomFlip3D'),
                            dict(
                                point_cloud_range=[
                                    0,
                                    -40,
                                    -3,
                                    70.4,
                                    40,
                                    1,
                                ],
                                type='PointsRangeFilter'),
                        ],
                        type='MultiScaleFlipAug3D'),
                    dict(
                        keys=[
                            'points',
                            'gt_bboxes_3d',
                            'gt_labels_3d',
                        ],
                        type='Pack3DDetInputs'),
                ],
                test_mode=True,
                type='KittiDataset'),
        ],
        shuffle=True,
        type='ConcatDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    classes=[
        'Pedestrian',
        'Cyclist',
        'Car',
    ],
    metric='det3d',
    output_dir=
    '/home/cws-ml-lab/mmdetection3d_for_rail/checkpoints/rtx4090_pvrcnn_run8_mixed_3class',
    pcd_limit_range=[
        0,
        -40,
        -3,
        70.4,
        40,
        1,
    ],
    random_viz_keys=None,
    save_evaluation_results=True,
    save_graphics=False,
    save_random_viz=False,
    type='General_3dDet_Metric_MMLab')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='Det3DLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
voxel_size = [
    0.05,
    0.05,
    0.1,
]
work_dir = '/home/cws-ml-lab/mmdetection3d_for_rail/checkpoints/rtx4090_pvrcnn_run8_mixed_3class'

/home/cws-ml-lab/mmdetection3d_for_rail/mmdet3d/models/dense_heads/anchor3d_head.py:94: UserWarning: dir_offset and dir_limit_offset will be depressed and be incorporated into box coder in the future
  warnings.warn(
09/26 15:26:08 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
wandb: Currently logged in as: nicoscore99 (railsensing). Use `wandb login --relogin` to force relogin
09/26 15:26:09 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
(BELOW_NORMAL) WandbLoggerHook                    
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(BELOW_NORMAL) WandbLoggerHook                    
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) WandbLoggerHook                    
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) Det3DVisualizationHook             
(BELOW_NORMAL) LoggerHook                         
(BELOW_NORMAL) WandbLoggerHook                    
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(BELOW_NORMAL) WandbLoggerHook                    
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) Det3DVisualizationHook             
(BELOW_NORMAL) LoggerHook                         
(BELOW_NORMAL) WandbLoggerHook                    
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(BELOW_NORMAL) WandbLoggerHook                    
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
(BELOW_NORMAL) WandbLoggerHook                    
 -------------------- 
09/26 15:26:10 - mmengine - INFO - Before filter database:
09/26 15:26:10 - mmengine - INFO - load 11427 Pedestrian database infos in DataBaseSampler
09/26 15:26:10 - mmengine - INFO - load 1133 Car database infos in DataBaseSampler
09/26 15:26:10 - mmengine - INFO - load 98 Cyclist database infos in DataBaseSampler
09/26 15:26:10 - mmengine - INFO - After filter database:
09/26 15:26:10 - mmengine - INFO - load 10725 Pedestrian database infos in DataBaseSampler
09/26 15:26:10 - mmengine - INFO - load 1068 Car database infos in DataBaseSampler
09/26 15:26:10 - mmengine - INFO - load 96 Cyclist database infos in DataBaseSampler
09/26 15:26:11 - mmengine - INFO - ------------------------------
09/26 15:26:11 - mmengine - INFO - The length of training dataset: 1303
09/26 15:26:11 - mmengine - INFO - The number of instances per category in the dataset:
+------------+--------+
| category   | number |
+------------+--------+
| Pedestrian | 11427  |
| Cyclist    | 98     |
| Car        | 1133   |
+------------+--------+
09/26 15:26:11 - mmengine - INFO - Initialized as a ClassBalancedDataset with 1393 images
09/26 15:26:11 - mmengine - INFO - Dataset size increased by 1.07x
09/26 15:26:11 - mmengine - INFO - Before filter database:
09/26 15:26:11 - mmengine - INFO - load 2207 Pedestrian database infos in DataBaseSampler
09/26 15:26:11 - mmengine - INFO - load 14357 Car database infos in DataBaseSampler
09/26 15:26:11 - mmengine - INFO - load 734 Cyclist database infos in DataBaseSampler
09/26 15:26:11 - mmengine - INFO - load 1297 Van database infos in DataBaseSampler
09/26 15:26:11 - mmengine - INFO - load 488 Truck database infos in DataBaseSampler
09/26 15:26:11 - mmengine - INFO - load 224 Tram database infos in DataBaseSampler
09/26 15:26:11 - mmengine - INFO - load 337 Misc database infos in DataBaseSampler
09/26 15:26:11 - mmengine - INFO - load 56 Person_sitting database infos in DataBaseSampler
09/26 15:26:11 - mmengine - INFO - After filter database:
09/26 15:26:11 - mmengine - INFO - load 1868 Pedestrian database infos in DataBaseSampler
09/26 15:26:11 - mmengine - INFO - load 9639 Car database infos in DataBaseSampler
09/26 15:26:11 - mmengine - INFO - load 538 Cyclist database infos in DataBaseSampler
09/26 15:26:11 - mmengine - INFO - load 826 Van database infos in DataBaseSampler
09/26 15:26:11 - mmengine - INFO - load 321 Truck database infos in DataBaseSampler
09/26 15:26:11 - mmengine - INFO - load 199 Tram database infos in DataBaseSampler
09/26 15:26:11 - mmengine - INFO - load 259 Misc database infos in DataBaseSampler
09/26 15:26:11 - mmengine - INFO - load 53 Person_sitting database infos in DataBaseSampler
09/26 15:26:12 - mmengine - INFO - ------------------------------
09/26 15:26:12 - mmengine - INFO - The length of training dataset: 3712
09/26 15:26:12 - mmengine - INFO - The number of instances per category in the dataset:
+------------+--------+
| category   | number |
+------------+--------+
| Pedestrian | 2207   |
| Cyclist    | 734    |
| Car        | 14357  |
+------------+--------+
09/26 15:26:13 - mmengine - INFO - ------------------------------
09/26 15:26:13 - mmengine - INFO - The length of test dataset: 231
09/26 15:26:13 - mmengine - INFO - The number of instances per category in the dataset:
+------------+--------+
| category   | number |
+------------+--------+
| Pedestrian | 2187   |
| Cyclist    | 19     |
| Car        | 178    |
+------------+--------+
Reduced dataset size to:  376
09/26 15:26:14 - mmengine - INFO - ------------------------------
09/26 15:26:14 - mmengine - INFO - The length of test dataset: 376
09/26 15:26:14 - mmengine - INFO - The number of instances per category in the dataset:
+------------+--------+
| category   | number |
+------------+--------+
| Pedestrian | 2280   |
| Cyclist    | 893    |
| Car        | 14385  |
+------------+--------+
wandb: - Waiting for wandb.init()...wandb: \ Waiting for wandb.init()...wandb: wandb version 0.18.1 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.17.3
wandb: Run data is saved locally in /home/cws-ml-lab/mmdetection3d_for_rail/checkpoints/rtx4090_pvrcnn_run8_mixed_3class/wandb/run-20240926_152615-1grfu0o6
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run rtx4090_pvrcnn_run8_mixed_3class
wandb: ⭐️ View project at https://wandb.ai/railsensing/pv-rcnn
wandb: 🚀 View run at https://wandb.ai/railsensing/pv-rcnn/runs/1grfu0o6
09/26 15:26:16 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
09/26 15:26:16 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
09/26 15:26:16 - mmengine - INFO - Checkpoints will be saved to /home/cws-ml-lab/mmdetection3d_for_rail/checkpoints/rtx4090_pvrcnn_run8_mixed_3class.
/home/cws-ml-lab/.local/lib/python3.10/site-packages/torch/functional.py:512: UserWarning: torch.meshgrid: in an upcoming release, it will be required to pass the indexing argument. (Triggered internally at ../aten/src/ATen/native/TensorShape.cpp:3587.)
  return _VF.meshgrid(tensors, **kwargs)  # type: ignore[attr-defined]
/home/cws-ml-lab/.local/lib/python3.10/site-packages/mmdet/models/task_modules/samplers/sampling_result.py:132: UserWarning: DeprecationWarning: pos_bboxes is deprecated, please use "pos_priors" instead
  warnings.warn('DeprecationWarning: pos_bboxes is deprecated, '
/home/cws-ml-lab/.local/lib/python3.10/site-packages/mmcv/ops/furthest_point_sample.py:30: UserWarning: The torch.cuda.*DtypeTensor constructors are no longer recommended. It's best to use methods such as torch.tensor(data, dtype=*, device='cuda') to create tensors. (Triggered internally at ../torch/csrc/tensor/python_tensor.cpp:78.)
  output = torch.cuda.IntTensor(B, num_points)
/home/cws-ml-lab/.local/lib/python3.10/site-packages/mmdet/models/task_modules/samplers/sampling_result.py:126: UserWarning: DeprecationWarning: bboxes is deprecated, please use "priors" instead
  warnings.warn('DeprecationWarning: bboxes is deprecated, '
09/26 15:26:51 - mmengine - INFO - Epoch(train)  [1][ 100/2553]  lr: 1.0001e-03  eta: 9:49:59  time: 0.2767  data_time: 0.0023  memory: 5459  grad_norm: 30.2686  loss: 4.8309  loss_rpn_cls: 0.7337  loss_rpn_bbox: 1.9592  loss_rpn_dir: 0.1245  loss_semantic: 0.3149  loss_cls: 0.1213  loss_bbox: 0.8542  loss_corner: 0.7231
09/26 15:27:19 - mmengine - INFO - Epoch(train)  [1][ 200/2553]  lr: 1.0005e-03  eta: 8:49:45  time: 0.2783  data_time: 0.0022  memory: 5480  grad_norm: 21.5385  loss: 3.6006  loss_rpn_cls: 0.6825  loss_rpn_bbox: 1.7344  loss_rpn_dir: 0.1092  loss_semantic: 0.2930  loss_cls: 0.1393  loss_bbox: 0.3504  loss_corner: 0.2919
09/26 15:27:46 - mmengine - INFO - Epoch(train)  [1][ 300/2553]  lr: 1.0012e-03  eta: 8:28:18  time: 0.2738  data_time: 0.0023  memory: 5453  grad_norm: 62.3646  loss: 3.9047  loss_rpn_cls: 0.6336  loss_rpn_bbox: 1.5483  loss_rpn_dir: 0.1189  loss_semantic: 0.2248  loss_cls: 0.1901  loss_bbox: 0.6510  loss_corner: 0.5379
09/26 15:28:14 - mmengine - INFO - Epoch(train)  [1][ 400/2553]  lr: 1.0021e-03  eta: 8:17:59  time: 0.2795  data_time: 0.0023  memory: 5442  grad_norm: 16.3689  loss: 3.2635  loss_rpn_cls: 0.6311  loss_rpn_bbox: 1.4580  loss_rpn_dir: 0.1107  loss_semantic: 0.2210  loss_cls: 0.1916  loss_bbox: 0.3928  loss_corner: 0.2584
09/26 15:28:42 - mmengine - INFO - Epoch(train)  [1][ 500/2553]  lr: 1.0033e-03  eta: 8:13:30  time: 0.2819  data_time: 0.0024  memory: 5452  grad_norm: 14.8928  loss: 3.2758  loss_rpn_cls: 0.5881  loss_rpn_bbox: 1.3180  loss_rpn_dir: 0.1136  loss_semantic: 0.2087  loss_cls: 0.2502  loss_bbox: 0.4912  loss_corner: 0.3061
09/26 15:29:10 - mmengine - INFO - Epoch(train)  [1][ 600/2553]  lr: 1.0048e-03  eta: 8:10:14  time: 0.2759  data_time: 0.0023  memory: 5488  grad_norm: 16.9062  loss: 3.2455  loss_rpn_cls: 0.5718  loss_rpn_bbox: 1.3203  loss_rpn_dir: 0.1153  loss_semantic: 0.1962  loss_cls: 0.2903  loss_bbox: 0.5144  loss_corner: 0.2372
09/26 15:29:38 - mmengine - INFO - Epoch(train)  [1][ 700/2553]  lr: 1.0065e-03  eta: 8:07:23  time: 0.2828  data_time: 0.0023  memory: 5459  grad_norm: 18.3159  loss: 3.0907  loss_rpn_cls: 0.5594  loss_rpn_bbox: 1.2393  loss_rpn_dir: 0.1044  loss_semantic: 0.1990  loss_cls: 0.2906  loss_bbox: 0.4982  loss_corner: 0.1998
09/26 15:30:06 - mmengine - INFO - Epoch(train)  [1][ 800/2553]  lr: 1.0085e-03  eta: 8:04:45  time: 0.2809  data_time: 0.0024  memory: 5491  grad_norm: 9.7748  loss: 2.9302  loss_rpn_cls: 0.5394  loss_rpn_bbox: 1.2105  loss_rpn_dir: 0.1072  loss_semantic: 0.2185  loss_cls: 0.3252  loss_bbox: 0.3678  loss_corner: 0.1616
09/26 15:30:33 - mmengine - INFO - Epoch(train)  [1][ 900/2553]  lr: 1.0108e-03  eta: 8:02:10  time: 0.2747  data_time: 0.0022  memory: 5450  grad_norm: 9.8950  loss: 2.8841  loss_rpn_cls: 0.5042  loss_rpn_bbox: 1.1762  loss_rpn_dir: 0.1161  loss_semantic: 0.1646  loss_cls: 0.3570  loss_bbox: 0.4164  loss_corner: 0.1497
09/26 15:31:01 - mmengine - INFO - Exp name: pv_rcnn_osdar23-3d_3class_20240926_152605
09/26 15:31:01 - mmengine - INFO - Epoch(train)  [1][1000/2553]  lr: 1.0133e-03  eta: 8:00:39  time: 0.2823  data_time: 0.0023  memory: 5484  grad_norm: 10.1948  loss: 3.0230  loss_rpn_cls: 0.5256  loss_rpn_bbox: 1.2535  loss_rpn_dir: 0.1069  loss_semantic: 0.1810  loss_cls: 0.3512  loss_bbox: 0.4507  loss_corner: 0.1541
09/26 15:31:29 - mmengine - INFO - Epoch(train)  [1][1100/2553]  lr: 1.0161e-03  eta: 7:59:30  time: 0.2793  data_time: 0.0023  memory: 5452  grad_norm: 9.3540  loss: 2.8190  loss_rpn_cls: 0.4882  loss_rpn_bbox: 1.1152  loss_rpn_dir: 0.1103  loss_semantic: 0.1656  loss_cls: 0.3723  loss_bbox: 0.4084  loss_corner: 0.1591
09/26 15:31:57 - mmengine - INFO - Epoch(train)  [1][1200/2553]  lr: 1.0191e-03  eta: 7:57:48  time: 0.2814  data_time: 0.0024  memory: 5450  grad_norm: 8.4361  loss: 2.8004  loss_rpn_cls: 0.4908  loss_rpn_bbox: 1.1404  loss_rpn_dir: 0.1038  loss_semantic: 0.1641  loss_cls: 0.3618  loss_bbox: 0.4027  loss_corner: 0.1367
09/26 15:32:25 - mmengine - INFO - Epoch(train)  [1][1300/2553]  lr: 1.0224e-03  eta: 7:56:17  time: 0.2753  data_time: 0.0023  memory: 5483  grad_norm: 8.3456  loss: 2.7564  loss_rpn_cls: 0.4453  loss_rpn_bbox: 1.0948  loss_rpn_dir: 0.1154  loss_semantic: 0.1505  loss_cls: 0.4138  loss_bbox: 0.4007  loss_corner: 0.1359
09/26 15:32:53 - mmengine - INFO - Epoch(train)  [1][1400/2553]  lr: 1.0260e-03  eta: 7:55:54  time: 0.2831  data_time: 0.0024  memory: 5449  grad_norm: 8.3379  loss: 2.7757  loss_rpn_cls: 0.4501  loss_rpn_bbox: 1.1113  loss_rpn_dir: 0.1035  loss_semantic: 0.1492  loss_cls: 0.4046  loss_bbox: 0.4074  loss_corner: 0.1496
09/26 15:33:21 - mmengine - INFO - Epoch(train)  [1][1500/2553]  lr: 1.0299e-03  eta: 7:55:24  time: 0.2861  data_time: 0.0023  memory: 5453  grad_norm: 10.2678  loss: 2.7999  loss_rpn_cls: 0.4697  loss_rpn_bbox: 1.2009  loss_rpn_dir: 0.1044  loss_semantic: 0.1659  loss_cls: 0.3639  loss_bbox: 0.3504  loss_corner: 0.1446
09/26 15:33:50 - mmengine - INFO - Epoch(train)  [1][1600/2553]  lr: 1.0340e-03  eta: 7:54:53  time: 0.2806  data_time: 0.0024  memory: 5468  grad_norm: 7.1706  loss: 2.6677  loss_rpn_cls: 0.4395  loss_rpn_bbox: 1.0661  loss_rpn_dir: 0.1031  loss_semantic: 0.1474  loss_cls: 0.4229  loss_bbox: 0.3685  loss_corner: 0.1203
09/26 15:34:18 - mmengine - INFO - Epoch(train)  [1][1700/2553]  lr: 1.0384e-03  eta: 7:54:41  time: 0.2926  data_time: 0.0023  memory: 5488  grad_norm: 6.5288  loss: 2.6253  loss_rpn_cls: 0.4511  loss_rpn_bbox: 1.0585  loss_rpn_dir: 0.0995  loss_semantic: 0.1536  loss_cls: 0.4006  loss_bbox: 0.3390  loss_corner: 0.1232
09/26 15:34:46 - mmengine - INFO - Epoch(train)  [1][1800/2553]  lr: 1.0430e-03  eta: 7:53:33  time: 0.2764  data_time: 0.0023  memory: 5475  grad_norm: 9.5769  loss: 2.7147  loss_rpn_cls: 0.4217  loss_rpn_bbox: 1.0477  loss_rpn_dir: 0.1033  loss_semantic: 0.1392  loss_cls: 0.4212  loss_bbox: 0.4078  loss_corner: 0.1738
09/26 15:35:14 - mmengine - INFO - Epoch(train)  [1][1900/2553]  lr: 1.0479e-03  eta: 7:53:05  time: 0.2883  data_time: 0.0023  memory: 5491  grad_norm: 6.5525  loss: 2.6114  loss_rpn_cls: 0.4472  loss_rpn_bbox: 1.0289  loss_rpn_dir: 0.0905  loss_semantic: 0.1637  loss_cls: 0.4258  loss_bbox: 0.3321  loss_corner: 0.1232
09/26 15:35:43 - mmengine - INFO - Exp name: pv_rcnn_osdar23-3d_3class_20240926_152605
09/26 15:35:43 - mmengine - INFO - Epoch(train)  [1][2000/2553]  lr: 1.0531e-03  eta: 7:52:46  time: 0.2863  data_time: 0.0023  memory: 5454  grad_norm: 6.0188  loss: 2.6412  loss_rpn_cls: 0.4199  loss_rpn_bbox: 1.0460  loss_rpn_dir: 0.0957  loss_semantic: 0.1526  loss_cls: 0.4265  loss_bbox: 0.3778  loss_corner: 0.1228
09/26 15:36:11 - mmengine - INFO - Epoch(train)  [1][2100/2553]  lr: 1.0585e-03  eta: 7:52:16  time: 0.2811  data_time: 0.0023  memory: 5444  grad_norm: 6.7302  loss: 2.6351  loss_rpn_cls: 0.4024  loss_rpn_bbox: 1.0095  loss_rpn_dir: 0.1002  loss_semantic: 0.1564  loss_cls: 0.4390  loss_bbox: 0.4017  loss_corner: 0.1258
09/26 15:36:40 - mmengine - INFO - Epoch(train)  [1][2200/2553]  lr: 1.0642e-03  eta: 7:51:56  time: 0.2830  data_time: 0.0023  memory: 5446  grad_norm: 7.0925  loss: 2.5564  loss_rpn_cls: 0.3919  loss_rpn_bbox: 0.9604  loss_rpn_dir: 0.0965  loss_semantic: 0.1450  loss_cls: 0.4470  loss_bbox: 0.3903  loss_corner: 0.1252
09/26 15:37:08 - mmengine - INFO - Epoch(train)  [1][2300/2553]  lr: 1.0702e-03  eta: 7:51:34  time: 0.2854  data_time: 0.0023  memory: 5466  grad_norm: 6.4450  loss: 2.6116  loss_rpn_cls: 0.4121  loss_rpn_bbox: 1.0269  loss_rpn_dir: 0.0938  loss_semantic: 0.1507  loss_cls: 0.4362  loss_bbox: 0.3650  loss_corner: 0.1268
09/26 15:37:36 - mmengine - INFO - Epoch(train)  [1][2400/2553]  lr: 1.0764e-03  eta: 7:51:02  time: 0.2866  data_time: 0.0023  memory: 5486  grad_norm: 5.3898  loss: 2.4162  loss_rpn_cls: 0.3887  loss_rpn_bbox: 0.9339  loss_rpn_dir: 0.0887  loss_semantic: 0.1478  loss_cls: 0.4531  loss_bbox: 0.3012  loss_corner: 0.1028
09/26 15:38:05 - mmengine - INFO - Epoch(train)  [1][2500/2553]  lr: 1.0829e-03  eta: 7:50:55  time: 0.2887  data_time: 0.0023  memory: 5454  grad_norm: 5.1834  loss: 2.4448  loss_rpn_cls: 0.3810  loss_rpn_bbox: 0.9660  loss_rpn_dir: 0.0937  loss_semantic: 0.1380  loss_cls: 0.4561  loss_bbox: 0.3109  loss_corner: 0.0992
09/26 15:38:20 - mmengine - INFO - Exp name: pv_rcnn_osdar23-3d_3class_20240926_152605
09/26 15:38:20 - mmengine - INFO - Saving checkpoint at 1 epochs
/home/cws-ml-lab/.local/lib/python3.10/site-packages/mmdet/models/task_modules/samplers/sampling_result.py:132: UserWarning: DeprecationWarning: pos_bboxes is deprecated, please use "pos_priors" instead
  warnings.warn('DeprecationWarning: pos_bboxes is deprecated, '
/home/cws-ml-lab/.local/lib/python3.10/site-packages/mmdet/models/task_modules/samplers/sampling_result.py:126: UserWarning: DeprecationWarning: bboxes is deprecated, please use "priors" instead
  warnings.warn('DeprecationWarning: bboxes is deprecated, '
09/26 15:38:50 - mmengine - INFO - Epoch(train)  [2][ 100/2553]  lr: 1.0933e-03  eta: 7:50:01  time: 0.2795  data_time: 0.0023  memory: 5480  grad_norm: 5.0348  loss: 2.4382  loss_rpn_cls: 0.3726  loss_rpn_bbox: 0.9318  loss_rpn_dir: 0.0965  loss_semantic: 0.1388  loss_cls: 0.4660  loss_bbox: 0.3262  loss_corner: 0.1064
09/26 15:39:18 - mmengine - INFO - Epoch(train)  [2][ 200/2553]  lr: 1.1004e-03  eta: 7:49:19  time: 0.2781  data_time: 0.0023  memory: 5447  grad_norm: 4.4554  loss: 2.3946  loss_rpn_cls: 0.3496  loss_rpn_bbox: 0.9168  loss_rpn_dir: 0.0998  loss_semantic: 0.1322  loss_cls: 0.4915  loss_bbox: 0.3161  loss_corner: 0.0886
09/26 15:39:46 - mmengine - INFO - Epoch(train)  [2][ 300/2553]  lr: 1.1078e-03  eta: 7:48:50  time: 0.2849  data_time: 0.0023  memory: 5487  grad_norm: 5.4251  loss: 2.4306  loss_rpn_cls: 0.3671  loss_rpn_bbox: 0.9067  loss_rpn_dir: 0.0916  loss_semantic: 0.1541  loss_cls: 0.4791  loss_bbox: 0.3186  loss_corner: 0.1133
09/26 15:40:14 - mmengine - INFO - Epoch(train)  [2][ 400/2553]  lr: 1.1155e-03  eta: 7:48:25  time: 0.2845  data_time: 0.0023  memory: 5456  grad_norm: 4.8570  loss: 2.3726  loss_rpn_cls: 0.3525  loss_rpn_bbox: 0.9218  loss_rpn_dir: 0.0924  loss_semantic: 0.1366  loss_cls: 0.4728  loss_bbox: 0.3036  loss_corner: 0.0928
09/26 15:40:28 - mmengine - INFO - Exp name: pv_rcnn_osdar23-3d_3class_20240926_152605
09/26 15:40:43 - mmengine - INFO - Epoch(train)  [2][ 500/2553]  lr: 1.1234e-03  eta: 7:48:11  time: 0.2872  data_time: 0.0024  memory: 5499  grad_norm: 5.1175  loss: 2.3939  loss_rpn_cls: 0.3617  loss_rpn_bbox: 0.9372  loss_rpn_dir: 0.0906  loss_semantic: 0.1326  loss_cls: 0.4646  loss_bbox: 0.3084  loss_corner: 0.0988
09/26 15:41:11 - mmengine - INFO - Epoch(train)  [2][ 600/2553]  lr: 1.1316e-03  eta: 7:47:32  time: 0.2795  data_time: 0.0023  memory: 5452  grad_norm: 4.6469  loss: 2.2641  loss_rpn_cls: 0.3138  loss_rpn_bbox: 0.8667  loss_rpn_dir: 0.0976  loss_semantic: 0.1191  loss_cls: 0.4910  loss_bbox: 0.2942  loss_corner: 0.0817
09/26 15:41:40 - mmengine - INFO - Epoch(train)  [2][ 700/2553]  lr: 1.1400e-03  eta: 7:47:15  time: 0.2842  data_time: 0.0024  memory: 5461  grad_norm: 4.9655  loss: 2.3250  loss_rpn_cls: 0.3391  loss_rpn_bbox: 0.9013  loss_rpn_dir: 0.0922  loss_semantic: 0.1275  loss_cls: 0.4736  loss_bbox: 0.2965  loss_corner: 0.0948
09/26 15:42:08 - mmengine - INFO - Epoch(train)  [2][ 800/2553]  lr: 1.1487e-03  eta: 7:46:44  time: 0.2832  data_time: 0.0023  memory: 5460  grad_norm: 4.4614  loss: 2.3574  loss_rpn_cls: 0.3310  loss_rpn_bbox: 0.9183  loss_rpn_dir: 0.0880  loss_semantic: 0.1265  loss_cls: 0.4977  loss_bbox: 0.3016  loss_corner: 0.0943
09/26 15:42:36 - mmengine - INFO - Epoch(train)  [2][ 900/2553]  lr: 1.1577e-03  eta: 7:46:10  time: 0.2836  data_time: 0.0024  memory: 5493  grad_norm: 4.9461  loss: 2.3308  loss_rpn_cls: 0.3269  loss_rpn_bbox: 0.8652  loss_rpn_dir: 0.0859  loss_semantic: 0.1429  loss_cls: 0.5018  loss_bbox: 0.3084  loss_corner: 0.0997
09/26 15:43:05 - mmengine - INFO - Epoch(train)  [2][1000/2553]  lr: 1.1669e-03  eta: 7:45:49  time: 0.2807  data_time: 0.0023  memory: 5479  grad_norm: 4.3599  loss: 2.3221  loss_rpn_cls: 0.3306  loss_rpn_bbox: 0.9073  loss_rpn_dir: 0.0879  loss_semantic: 0.1379  loss_cls: 0.4916  loss_bbox: 0.2851  loss_corner: 0.0817
09/26 15:43:33 - mmengine - INFO - Epoch(train)  [2][1100/2553]  lr: 1.1763e-03  eta: 7:45:20  time: 0.2858  data_time: 0.0023  memory: 5480  grad_norm: 4.0147  loss: 2.3125  loss_rpn_cls: 0.3349  loss_rpn_bbox: 0.8977  loss_rpn_dir: 0.0882  loss_semantic: 0.1345  loss_cls: 0.4993  loss_bbox: 0.2790  loss_corner: 0.0788
09/26 15:44:01 - mmengine - INFO - Epoch(train)  [2][1200/2553]  lr: 1.1861e-03  eta: 7:44:43  time: 0.2821  data_time: 0.0023  memory: 5444  grad_norm: 4.1040  loss: 2.2803  loss_rpn_cls: 0.3175  loss_rpn_bbox: 0.8766  loss_rpn_dir: 0.0921  loss_semantic: 0.1149  loss_cls: 0.5016  loss_bbox: 0.2980  loss_corner: 0.0795
09/26 15:44:30 - mmengine - INFO - Epoch(train)  [2][1300/2553]  lr: 1.1960e-03  eta: 7:44:21  time: 0.2847  data_time: 0.0024  memory: 5494  grad_norm: 4.4002  loss: 2.3193  loss_rpn_cls: 0.3293  loss_rpn_bbox: 0.9017  loss_rpn_dir: 0.0854  loss_semantic: 0.1204  loss_cls: 0.4947  loss_bbox: 0.3050  loss_corner: 0.0829
09/26 15:44:58 - mmengine - INFO - Epoch(train)  [2][1400/2553]  lr: 1.2063e-03  eta: 7:43:59  time: 0.2851  data_time: 0.0023  memory: 5443  grad_norm: 5.1017  loss: 2.3254  loss_rpn_cls: 0.3095  loss_rpn_bbox: 0.8467  loss_rpn_dir: 0.0815  loss_semantic: 0.1406  loss_cls: 0.5249  loss_bbox: 0.3056  loss_corner: 0.1166
09/26 15:45:11 - mmengine - INFO - Exp name: pv_rcnn_osdar23-3d_3class_20240926_152605
09/26 15:45:26 - mmengine - INFO - Epoch(train)  [2][1500/2553]  lr: 1.2168e-03  eta: 7:43:22  time: 0.2840  data_time: 0.0024  memory: 5453  grad_norm: 3.8054  loss: 2.2692  loss_rpn_cls: 0.3098  loss_rpn_bbox: 0.8581  loss_rpn_dir: 0.0880  loss_semantic: 0.1256  loss_cls: 0.5084  loss_bbox: 0.3008  loss_corner: 0.0785
09/26 15:45:55 - mmengine - INFO - Epoch(train)  [2][1600/2553]  lr: 1.2275e-03  eta: 7:42:55  time: 0.2844  data_time: 0.0023  memory: 5491  grad_norm: 4.3363  loss: 2.2469  loss_rpn_cls: 0.2975  loss_rpn_bbox: 0.8484  loss_rpn_dir: 0.0877  loss_semantic: 0.1204  loss_cls: 0.5199  loss_bbox: 0.2885  loss_corner: 0.0846
09/26 15:46:23 - mmengine - INFO - Epoch(train)  [2][1700/2553]  lr: 1.2385e-03  eta: 7:42:29  time: 0.2826  data_time: 0.0023  memory: 5450  grad_norm: 3.9661  loss: 2.3164  loss_rpn_cls: 0.3094  loss_rpn_bbox: 0.8796  loss_rpn_dir: 0.0851  loss_semantic: 0.1301  loss_cls: 0.5147  loss_bbox: 0.3040  loss_corner: 0.0935
09/26 15:46:53 - mmengine - INFO - Epoch(train)  [2][1800/2553]  lr: 1.2497e-03  eta: 7:42:21  time: 0.2926  data_time: 0.0023  memory: 5485  grad_norm: 3.7180  loss: 2.2066  loss_rpn_cls: 0.3062  loss_rpn_bbox: 0.8427  loss_rpn_dir: 0.0781  loss_semantic: 0.1267  loss_cls: 0.5026  loss_bbox: 0.2704  loss_corner: 0.0798
09/26 15:47:21 - mmengine - INFO - Epoch(train)  [2][1900/2553]  lr: 1.2612e-03  eta: 7:41:56  time: 0.2886  data_time: 0.0024  memory: 5505  grad_norm: 3.8485  loss: 2.2724  loss_rpn_cls: 0.3296  loss_rpn_bbox: 0.8832  loss_rpn_dir: 0.0787  loss_semantic: 0.1300  loss_cls: 0.4908  loss_bbox: 0.2834  loss_corner: 0.0767
09/26 15:47:50 - mmengine - INFO - Epoch(train)  [2][2000/2553]  lr: 1.2730e-03  eta: 7:41:32  time: 0.2824  data_time: 0.0024  memory: 5442  grad_norm: 3.5255  loss: 2.1681  loss_rpn_cls: 0.2880  loss_rpn_bbox: 0.8172  loss_rpn_dir: 0.0854  loss_semantic: 0.1151  loss_cls: 0.5198  loss_bbox: 0.2731  loss_corner: 0.0694
09/26 15:48:18 - mmengine - INFO - Epoch(train)  [2][2100/2553]  lr: 1.2850e-03  eta: 7:41:03  time: 0.2849  data_time: 0.0023  memory: 5495  grad_norm: 4.2077  loss: 2.2668  loss_rpn_cls: 0.2959  loss_rpn_bbox: 0.8483  loss_rpn_dir: 0.0834  loss_semantic: 0.1174  loss_cls: 0.5128  loss_bbox: 0.3223  loss_corner: 0.0867
09/26 15:48:47 - mmengine - INFO - Epoch(train)  [2][2200/2553]  lr: 1.2972e-03  eta: 7:40:37  time: 0.2811  data_time: 0.0023  memory: 5484  grad_norm: 3.5398  loss: 2.1643  loss_rpn_cls: 0.2855  loss_rpn_bbox: 0.8292  loss_rpn_dir: 0.0880  loss_semantic: 0.1025  loss_cls: 0.5142  loss_bbox: 0.2723  loss_corner: 0.0727
09/26 15:49:15 - mmengine - INFO - Epoch(train)  [2][2300/2553]  lr: 1.3097e-03  eta: 7:40:14  time: 0.2864  data_time: 0.0024  memory: 5467  grad_norm: 3.4737  loss: 2.1257  loss_rpn_cls: 0.3050  loss_rpn_bbox: 0.7827  loss_rpn_dir: 0.0793  loss_semantic: 0.1115  loss_cls: 0.5049  loss_bbox: 0.2704  loss_corner: 0.0718
09/26 15:49:44 - mmengine - INFO - Epoch(train)  [2][2400/2553]  lr: 1.3224e-03  eta: 7:39:46  time: 0.2841  data_time: 0.0024  memory: 5453  grad_norm: 3.5037  loss: 2.2131  loss_rpn_cls: 0.3042  loss_rpn_bbox: 0.8522  loss_rpn_dir: 0.0846  loss_semantic: 0.1148  loss_cls: 0.5094  loss_bbox: 0.2821  loss_corner: 0.0658
09/26 15:49:57 - mmengine - INFO - Exp name: pv_rcnn_osdar23-3d_3class_20240926_152605
09/26 15:50:12 - mmengine - INFO - Epoch(train)  [2][2500/2553]  lr: 1.3354e-03  eta: 7:39:18  time: 0.2832  data_time: 0.0024  memory: 5446  grad_norm: 3.5933  loss: 2.0970  loss_rpn_cls: 0.2723  loss_rpn_bbox: 0.7864  loss_rpn_dir: 0.0836  loss_semantic: 0.1030  loss_cls: 0.5226  loss_bbox: 0.2616  loss_corner: 0.0675
09/26 15:50:27 - mmengine - INFO - Exp name: pv_rcnn_osdar23-3d_3class_20240926_152605
09/26 15:50:27 - mmengine - INFO - Saving checkpoint at 2 epochs
/home/cws-ml-lab/.local/lib/python3.10/site-packages/mmdet/models/task_modules/samplers/sampling_result.py:132: UserWarning: DeprecationWarning: pos_bboxes is deprecated, please use "pos_priors" instead
  warnings.warn('DeprecationWarning: pos_bboxes is deprecated, '
/home/cws-ml-lab/.local/lib/python3.10/site-packages/mmdet/models/task_modules/samplers/sampling_result.py:126: UserWarning: DeprecationWarning: bboxes is deprecated, please use "priors" instead
  warnings.warn('DeprecationWarning: bboxes is deprecated, '
09/26 15:50:57 - mmengine - INFO - Epoch(train)  [3][ 100/2553]  lr: 1.3558e-03  eta: 7:38:31  time: 0.2832  data_time: 0.0023  memory: 5475  grad_norm: 3.6532  loss: 2.1043  loss_rpn_cls: 0.2838  loss_rpn_bbox: 0.7687  loss_rpn_dir: 0.0842  loss_semantic: 0.1165  loss_cls: 0.5184  loss_bbox: 0.2625  loss_corner: 0.0703
09/26 15:51:25 - mmengine - INFO - Epoch(train)  [3][ 200/2553]  lr: 1.3694e-03  eta: 7:38:09  time: 0.2842  data_time: 0.0023  memory: 5453  grad_norm: 3.4247  loss: 2.1519  loss_rpn_cls: 0.2808  loss_rpn_bbox: 0.8069  loss_rpn_dir: 0.0860  loss_semantic: 0.1172  loss_cls: 0.5145  loss_bbox: 0.2782  loss_corner: 0.0682
09/26 15:51:54 - mmengine - INFO - Epoch(train)  [3][ 300/2553]  lr: 1.3832e-03  eta: 7:37:46  time: 0.2838  data_time: 0.0024  memory: 5454  grad_norm: 3.0992  loss: 2.0844  loss_rpn_cls: 0.2834  loss_rpn_bbox: 0.7822  loss_rpn_dir: 0.0816  loss_semantic: 0.1111  loss_cls: 0.5135  loss_bbox: 0.2489  loss_corner: 0.0638
09/26 15:52:22 - mmengine - INFO - Epoch(train)  [3][ 400/2553]  lr: 1.3973e-03  eta: 7:37:18  time: 0.2841  data_time: 0.0023  memory: 5457  grad_norm: 3.1170  loss: 2.0576  loss_rpn_cls: 0.2758  loss_rpn_bbox: 0.7633  loss_rpn_dir: 0.0800  loss_semantic: 0.1050  loss_cls: 0.5199  loss_bbox: 0.2484  loss_corner: 0.0653
09/26 15:52:51 - mmengine - INFO - Epoch(train)  [3][ 500/2553]  lr: 1.4117e-03  eta: 7:36:50  time: 0.2863  data_time: 0.0023  memory: 5485  grad_norm: 3.3505  loss: 2.0936  loss_rpn_cls: 0.2749  loss_rpn_bbox: 0.7731  loss_rpn_dir: 0.0779  loss_semantic: 0.1116  loss_cls: 0.5218  loss_bbox: 0.2660  loss_corner: 0.0685
09/26 15:53:20 - mmengine - INFO - Epoch(train)  [3][ 600/2553]  lr: 1.4263e-03  eta: 7:36:26  time: 0.2901  data_time: 0.0023  memory: 5475  grad_norm: 3.1740  loss: 2.1886  loss_rpn_cls: 0.3028  loss_rpn_bbox: 0.8443  loss_rpn_dir: 0.0776  loss_semantic: 0.1201  loss_cls: 0.5096  loss_bbox: 0.2634  loss_corner: 0.0707
09/26 15:53:48 - mmengine - INFO - Epoch(train)  [3][ 700/2553]  lr: 1.4411e-03  eta: 7:35:53  time: 0.2825  data_time: 0.0024  memory: 5466  grad_norm: 2.9494  loss: 2.0044  loss_rpn_cls: 0.2772  loss_rpn_bbox: 0.7306  loss_rpn_dir: 0.0830  loss_semantic: 0.1040  loss_cls: 0.5040  loss_bbox: 0.2442  loss_corner: 0.0614
09/26 15:54:16 - mmengine - INFO - Epoch(train)  [3][ 800/2553]  lr: 1.4561e-03  eta: 7:35:23  time: 0.2839  data_time: 0.0024  memory: 5489  grad_norm: 2.9334  loss: 2.0784  loss_rpn_cls: 0.2727  loss_rpn_bbox: 0.7728  loss_rpn_dir: 0.0772  loss_semantic: 0.1030  loss_cls: 0.5243  loss_bbox: 0.2659  loss_corner: 0.0626
09/26 15:54:43 - mmengine - INFO - Exp name: pv_rcnn_osdar23-3d_3class_20240926_152605
09/26 15:54:45 - mmengine - INFO - Epoch(train)  [3][ 900/2553]  lr: 1.4714e-03  eta: 7:35:04  time: 0.2877  data_time: 0.0023  memory: 5457  grad_norm: 3.1757  loss: 2.0634  loss_rpn_cls: 0.2735  loss_rpn_bbox: 0.7605  loss_rpn_dir: 0.0777  loss_semantic: 0.1184  loss_cls: 0.5138  loss_bbox: 0.2572  loss_corner: 0.0623
09/26 15:55:13 - mmengine - INFO - Epoch(train)  [3][1000/2553]  lr: 1.4870e-03  eta: 7:34:34  time: 0.2827  data_time: 0.0023  memory: 5452  grad_norm: 2.8367  loss: 2.0262  loss_rpn_cls: 0.2674  loss_rpn_bbox: 0.7405  loss_rpn_dir: 0.0826  loss_semantic: 0.1033  loss_cls: 0.5195  loss_bbox: 0.2520  loss_corner: 0.0609
09/26 15:55:41 - mmengine - INFO - Epoch(train)  [3][1100/2553]  lr: 1.5028e-03  eta: 7:34:01  time: 0.2816  data_time: 0.0023  memory: 5448  grad_norm: 5.9031  loss: 2.0806  loss_rpn_cls: 0.2694  loss_rpn_bbox: 0.7431  loss_rpn_dir: 0.0840  loss_semantic: 0.0959  loss_cls: 0.5072  loss_bbox: 0.2541  loss_corner: 0.1269
09/26 15:56:09 - mmengine - INFO - Epoch(train)  [3][1200/2553]  lr: 1.5188e-03  eta: 7:33:25  time: 0.2774  data_time: 0.0024  memory: 5473  grad_norm: 2.8600  loss: 1.9665  loss_rpn_cls: 0.2526  loss_rpn_bbox: 0.7139  loss_rpn_dir: 0.0836  loss_semantic: 0.0969  loss_cls: 0.5161  loss_bbox: 0.2445  loss_corner: 0.0589
09/26 15:56:37 - mmengine - INFO - Epoch(train)  [3][1300/2553]  lr: 1.5350e-03  eta: 7:32:54  time: 0.2822  data_time: 0.0024  memory: 5446  grad_norm: 2.7685  loss: 1.9958  loss_rpn_cls: 0.2631  loss_rpn_bbox: 0.7478  loss_rpn_dir: 0.0759  loss_semantic: 0.1026  loss_cls: 0.5125  loss_bbox: 0.2378  loss_corner: 0.0561
09/26 15:57:06 - mmengine - INFO - Epoch(train)  [3][1400/2553]  lr: 1.5515e-03  eta: 7:32:31  time: 0.2930  data_time: 0.0024  memory: 5465  grad_norm: 2.8645  loss: 2.0473  loss_rpn_cls: 0.2891  loss_rpn_bbox: 0.7727  loss_rpn_dir: 0.0709  loss_semantic: 0.1129  loss_cls: 0.4992  loss_bbox: 0.2413  loss_corner: 0.0612
09/26 15:57:34 - mmengine - INFO - Epoch(train)  [3][1500/2553]  lr: 1.5682e-03  eta: 7:32:01  time: 0.2870  data_time: 0.0024  memory: 5498  grad_norm: 11.0617  loss: 2.0950  loss_rpn_cls: 0.2519  loss_rpn_bbox: 0.7171  loss_rpn_dir: 0.0742  loss_semantic: 0.0967  loss_cls: 0.5199  loss_bbox: 0.2528  loss_corner: 0.1824
09/26 15:58:03 - mmengine - INFO - Epoch(train)  [3][1600/2553]  lr: 1.5852e-03  eta: 7:31:35  time: 0.2831  data_time: 0.0024  memory: 5445  grad_norm: 2.5763  loss: 1.9370  loss_rpn_cls: 0.2449  loss_rpn_bbox: 0.7054  loss_rpn_dir: 0.0769  loss_semantic: 0.0971  loss_cls: 0.5113  loss_bbox: 0.2458  loss_corner: 0.0556
09/26 15:58:32 - mmengine - INFO - Epoch(train)  [3][1700/2553]  lr: 1.6024e-03  eta: 7:31:10  time: 0.2887  data_time: 0.0024  memory: 5484  grad_norm: 2.6369  loss: 2.0003  loss_rpn_cls: 0.2751  loss_rpn_bbox: 0.7437  loss_rpn_dir: 0.0761  loss_semantic: 0.0988  loss_cls: 0.4996  loss_bbox: 0.2500  loss_corner: 0.0569
09/26 15:59:00 - mmengine - INFO - Epoch(train)  [3][1800/2553]  lr: 1.6198e-03  eta: 7:30:40  time: 0.2834  data_time: 0.0025  memory: 5466  grad_norm: 2.5693  loss: 2.0020  loss_rpn_cls: 0.2592  loss_rpn_bbox: 0.7366  loss_rpn_dir: 0.0776  loss_semantic: 0.0977  loss_cls: 0.5133  loss_bbox: 0.2588  loss_corner: 0.0589
09/26 15:59:27 - mmengine - INFO - Exp name: pv_rcnn_osdar23-3d_3class_20240926_152605
09/26 15:59:29 - mmengine - INFO - Epoch(train)  [3][1900/2553]  lr: 1.6374e-03  eta: 7:30:16  time: 0.2884  data_time: 0.0024  memory: 5452  grad_norm: 3.3784  loss: 2.0981  loss_rpn_cls: 0.2767  loss_rpn_bbox: 0.7674  loss_rpn_dir: 0.0814  loss_semantic: 0.1053  loss_cls: 0.5147  loss_bbox: 0.2738  loss_corner: 0.0788
09/26 15:59:57 - mmengine - INFO - Epoch(train)  [3][2000/2553]  lr: 1.6553e-03  eta: 7:29:49  time: 0.2875  data_time: 0.0024  memory: 5448  grad_norm: 14404.6162  loss: 128.7951  loss_rpn_cls: 0.2659  loss_rpn_bbox: 0.7226  loss_rpn_dir: 0.0760  loss_semantic: 0.1244  loss_cls: 0.5260  loss_bbox: 0.2780  loss_corner: 126.8022
09/26 16:00:26 - mmengine - INFO - Epoch(train)  [3][2100/2553]  lr: 1.6734e-03  eta: 7:29:20  time: 0.2821  data_time: 0.0024  memory: 5448  grad_norm: 9.4600  loss: 2.0953  loss_rpn_cls: 0.2412  loss_rpn_bbox: 0.6977  loss_rpn_dir: 0.0816  loss_semantic: 0.0984  loss_cls: 0.5397  loss_bbox: 0.2702  loss_corner: 0.1666
09/26 16:00:54 - mmengine - INFO - Epoch(train)  [3][2200/2553]  lr: 1.6917e-03  eta: 7:28:54  time: 0.2840  data_time: 0.0023  memory: 5471  grad_norm: 2.7108  loss: 2.0224  loss_rpn_cls: 0.2565  loss_rpn_bbox: 0.7351  loss_rpn_dir: 0.0775  loss_semantic: 0.1015  loss_cls: 0.5179  loss_bbox: 0.2709  loss_corner: 0.0629
09/26 16:01:22 - mmengine - INFO - Epoch(train)  [3][2300/2553]  lr: 1.7103e-03  eta: 7:28:17  time: 0.2769  data_time: 0.0023  memory: 5486  grad_norm: 3.4310  loss: 1.9907  loss_rpn_cls: 0.2435  loss_rpn_bbox: 0.6796  loss_rpn_dir: 0.0826  loss_semantic: 0.1172  loss_cls: 0.5209  loss_bbox: 0.2733  loss_corner: 0.0735
09/26 16:01:50 - mmengine - INFO - Epoch(train)  [3][2400/2553]  lr: 1.7290e-03  eta: 7:27:49  time: 0.2820  data_time: 0.0024  memory: 5494  grad_norm: 2.2673  loss: 1.9318  loss_rpn_cls: 0.2414  loss_rpn_bbox: 0.7070  loss_rpn_dir: 0.0820  loss_semantic: 0.0918  loss_cls: 0.5080  loss_bbox: 0.2433  loss_corner: 0.0583
09/26 16:02:19 - mmengine - INFO - Epoch(train)  [3][2500/2553]  lr: 1.7480e-03  eta: 7:27:21  time: 0.2831  data_time: 0.0024  memory: 5456  grad_norm: 2.3622  loss: 1.9696  loss_rpn_cls: 0.2578  loss_rpn_bbox: 0.7494  loss_rpn_dir: 0.0747  loss_semantic: 0.0960  loss_cls: 0.5093  loss_bbox: 0.2280  loss_corner: 0.0543
09/26 16:02:33 - mmengine - INFO - Exp name: pv_rcnn_osdar23-3d_3class_20240926_152605
09/26 16:02:33 - mmengine - INFO - Saving checkpoint at 3 epochs
/home/cws-ml-lab/.local/lib/python3.10/site-packages/mmdet/models/task_modules/samplers/sampling_result.py:132: UserWarning: DeprecationWarning: pos_bboxes is deprecated, please use "pos_priors" instead
  warnings.warn('DeprecationWarning: pos_bboxes is deprecated, '
/home/cws-ml-lab/.local/lib/python3.10/site-packages/mmdet/models/task_modules/samplers/sampling_result.py:126: UserWarning: DeprecationWarning: bboxes is deprecated, please use "priors" instead
  warnings.warn('DeprecationWarning: bboxes is deprecated, '
09/26 16:03:03 - mmengine - INFO - Epoch(train)  [4][ 100/2553]  lr: 1.7775e-03  eta: 7:26:31  time: 0.2849  data_time: 0.0024  memory: 5466  grad_norm: 2.7757  loss: 2.0009  loss_rpn_cls: 0.2654  loss_rpn_bbox: 0.7416  loss_rpn_dir: 0.0779  loss_semantic: 0.1066  loss_cls: 0.5166  loss_bbox: 0.2378  loss_corner: 0.0550
09/26 16:03:31 - mmengine - INFO - Epoch(train)  [4][ 200/2553]  lr: 1.7971e-03  eta: 7:26:04  time: 0.2789  data_time: 0.0024  memory: 5441  grad_norm: 2.7069  loss: 1.9509  loss_rpn_cls: 0.2590  loss_rpn_bbox: 0.7043  loss_rpn_dir: 0.0778  loss_semantic: 0.1029  loss_cls: 0.5033  loss_bbox: 0.2447  loss_corner: 0.0589
09/26 16:04:00 - mmengine - INFO - Epoch(train)  [4][ 300/2553]  lr: 1.8169e-03  eta: 7:25:38  time: 0.2909  data_time: 0.0023  memory: 5486  grad_norm: 3.5693  loss: 1.9811  loss_rpn_cls: 0.2580  loss_rpn_bbox: 0.7191  loss_rpn_dir: 0.0729  loss_semantic: 0.1176  loss_cls: 0.5134  loss_bbox: 0.2369  loss_corner: 0.0633
09/26 16:04:12 - mmengine - INFO - Exp name: pv_rcnn_osdar23-3d_3class_20240926_152605
09/26 16:04:28 - mmengine - INFO - Epoch(train)  [4][ 400/2553]  lr: 1.8369e-03  eta: 7:25:11  time: 0.2823  data_time: 0.0025  memory: 5450  grad_norm: 2.5210  loss: 1.9783  loss_rpn_cls: 0.2584  loss_rpn_bbox: 0.7130  loss_rpn_dir: 0.0772  loss_semantic: 0.0986  loss_cls: 0.5248  loss_bbox: 0.2456  loss_corner: 0.0607
09/26 16:04:57 - mmengine - INFO - Epoch(train)  [4][ 500/2553]  lr: 1.8571e-03  eta: 7:24:44  time: 0.2882  data_time: 0.0024  memory: 5497  grad_norm: 2.2695  loss: 1.9691  loss_rpn_cls: 0.2484  loss_rpn_bbox: 0.7216  loss_rpn_dir: 0.0757  loss_semantic: 0.1007  loss_cls: 0.5160  loss_bbox: 0.2458  loss_corner: 0.0610
09/26 16:05:26 - mmengine - INFO - Epoch(train)  [4][ 600/2553]  lr: 1.8775e-03  eta: 7:24:19  time: 0.2840  data_time: 0.0024  memory: 5455  grad_norm: 2.3832  loss: 1.9619  loss_rpn_cls: 0.2627  loss_rpn_bbox: 0.7155  loss_rpn_dir: 0.0768  loss_semantic: 0.0922  loss_cls: 0.5166  loss_bbox: 0.2415  loss_corner: 0.0565
09/26 16:05:54 - mmengine - INFO - Epoch(train)  [4][ 700/2553]  lr: 1.8981e-03  eta: 7:23:49  time: 0.2772  data_time: 0.0025  memory: 5502  grad_norm: 2.5382  loss: 1.8880  loss_rpn_cls: 0.2304  loss_rpn_bbox: 0.6720  loss_rpn_dir: 0.0775  loss_semantic: 0.0833  loss_cls: 0.5281  loss_bbox: 0.2396  loss_corner: 0.0571
09/26 16:06:22 - mmengine - INFO - Epoch(train)  [4][ 800/2553]  lr: 1.9190e-03  eta: 7:23:20  time: 0.2839  data_time: 0.0024  memory: 5464  grad_norm: 2.3593  loss: 1.9210  loss_rpn_cls: 0.2469  loss_rpn_bbox: 0.7170  loss_rpn_dir: 0.0794  loss_semantic: 0.0963  loss_cls: 0.5042  loss_bbox: 0.2234  loss_corner: 0.0539
09/26 16:06:51 - mmengine - INFO - Epoch(train)  [4][ 900/2553]  lr: 1.9400e-03  eta: 7:22:51  time: 0.2813  data_time: 0.0024  memory: 5444  grad_norm: 3.5758  loss: 1.9247  loss_rpn_cls: 0.2461  loss_rpn_bbox: 0.6681  loss_rpn_dir: 0.0742  loss_semantic: 0.1104  loss_cls: 0.5094  loss_bbox: 0.2502  loss_corner: 0.0663
09/26 16:07:19 - mmengine - INFO - Epoch(train)  [4][1000/2553]  lr: 1.9613e-03  eta: 7:22:24  time: 0.2847  data_time: 0.0024  memory: 5450  grad_norm: 2.2245  loss: 1.8632  loss_rpn_cls: 0.2433  loss_rpn_bbox: 0.6617  loss_rpn_dir: 0.0747  loss_semantic: 0.0863  loss_cls: 0.5091  loss_bbox: 0.2341  loss_corner: 0.0540
09/26 16:07:48 - mmengine - INFO - Epoch(train)  [4][1100/2553]  lr: 1.9828e-03  eta: 7:21:58  time: 0.2863  data_time: 0.0024  memory: 5432  grad_norm: 2.3183  loss: 1.8488  loss_rpn_cls: 0.2427  loss_rpn_bbox: 0.6687  loss_rpn_dir: 0.0683  loss_semantic: 0.0895  loss_cls: 0.5018  loss_bbox: 0.2214  loss_corner: 0.0564
09/26 16:08:16 - mmengine - INFO - Epoch(train)  [4][1200/2553]  lr: 2.0045e-03  eta: 7:21:33  time: 0.2875  data_time: 0.0024  memory: 5468  grad_norm: 2.3707  loss: 1.9450  loss_rpn_cls: 0.2623  loss_rpn_bbox: 0.7335  loss_rpn_dir: 0.0667  loss_semantic: 0.0932  loss_cls: 0.5018  loss_bbox: 0.2297  loss_corner: 0.0578
09/26 16:08:45 - mmengine - INFO - Epoch(train)  [4][1300/2553]  lr: 2.0264e-03  eta: 7:21:10  time: 0.2951  data_time: 0.0023  memory: 5495  grad_norm: 3.1186  loss: 2.0209  loss_rpn_cls: 0.2611  loss_rpn_bbox: 0.7464  loss_rpn_dir: 0.0652  loss_semantic: 0.1190  loss_cls: 0.4993  loss_bbox: 0.2592  loss_corner: 0.0707
09/26 16:08:57 - mmengine - INFO - Exp name: pv_rcnn_osdar23-3d_3class_20240926_152605
09/26 16:09:14 - mmengine - INFO - Epoch(train)  [4][1400/2553]  lr: 2.0485e-03  eta: 7:20:44  time: 0.2888  data_time: 0.0025  memory: 5453  grad_norm: 2.2673  loss: 1.8469  loss_rpn_cls: 0.2336  loss_rpn_bbox: 0.6739  loss_rpn_dir: 0.0742  loss_semantic: 0.0837  loss_cls: 0.5034  loss_bbox: 0.2255  loss_corner: 0.0526
09/26 16:09:42 - mmengine - INFO - Epoch(train)  [4][1500/2553]  lr: 2.0708e-03  eta: 7:20:10  time: 0.2823  data_time: 0.0024  memory: 5459  grad_norm: 2.0725  loss: 1.8795  loss_rpn_cls: 0.2566  loss_rpn_bbox: 0.6914  loss_rpn_dir: 0.0739  loss_semantic: 0.0876  loss_cls: 0.5000  loss_bbox: 0.2201  loss_corner: 0.0500
09/26 16:10:10 - mmengine - INFO - Epoch(train)  [4][1600/2553]  lr: 2.0933e-03  eta: 7:19:41  time: 0.2830  data_time: 0.0024  memory: 5452  grad_norm: 2.5894  loss: 1.8670  loss_rpn_cls: 0.2506  loss_rpn_bbox: 0.6768  loss_rpn_dir: 0.0730  loss_semantic: 0.0867  loss_cls: 0.5011  loss_bbox: 0.2205  loss_corner: 0.0583
09/26 16:10:39 - mmengine - INFO - Epoch(train)  [4][1700/2553]  lr: 2.1160e-03  eta: 7:19:12  time: 0.2793  data_time: 0.0024  memory: 5493  grad_norm: 2.0170  loss: 1.8840  loss_rpn_cls: 0.2449  loss_rpn_bbox: 0.6652  loss_rpn_dir: 0.0752  loss_semantic: 0.0900  loss_cls: 0.5229  loss_bbox: 0.2312  loss_corner: 0.0546
09/26 16:11:07 - mmengine - INFO - Epoch(train)  [4][1800/2553]  lr: 2.1389e-03  eta: 7:18:47  time: 0.2909  data_time: 0.0025  memory: 5492  grad_norm: 2.3265  loss: 1.9047  loss_rpn_cls: 0.2466  loss_rpn_bbox: 0.7008  loss_rpn_dir: 0.0761  loss_semantic: 0.0997  loss_cls: 0.5031  loss_bbox: 0.2250  loss_corner: 0.0534
09/26 16:11:36 - mmengine - INFO - Epoch(train)  [4][1900/2553]  lr: 2.1621e-03  eta: 7:18:17  time: 0.2802  data_time: 0.0024  memory: 5457  grad_norm: 2.0717  loss: 1.8406  loss_rpn_cls: 0.2412  loss_rpn_bbox: 0.6463  loss_rpn_dir: 0.0711  loss_semantic: 0.0885  loss_cls: 0.5121  loss_bbox: 0.2276  loss_corner: 0.0538
09/26 16:12:04 - mmengine - INFO - Epoch(train)  [4][2000/2553]  lr: 2.1854e-03  eta: 7:17:51  time: 0.2907  data_time: 0.0024  memory: 5453  grad_norm: 87.9678  loss: 2.8689  loss_rpn_cls: 0.2571  loss_rpn_bbox: 0.6730  loss_rpn_dir: 0.0666  loss_semantic: 0.1101  loss_cls: 0.5164  loss_bbox: 0.2378  loss_corner: 1.0079
09/26 16:12:32 - mmengine - INFO - Epoch(train)  [4][2100/2553]  lr: 2.2089e-03  eta: 7:17:19  time: 0.2767  data_time: 0.0023  memory: 5454  grad_norm: 55.9383  loss: 2.6366  loss_rpn_cls: 0.2338  loss_rpn_bbox: 0.6619  loss_rpn_dir: 0.0749  loss_semantic: 0.0889  loss_cls: 0.5218  loss_bbox: 0.2523  loss_corner: 0.8031
09/26 16:13:00 - mmengine - INFO - Epoch(train)  [4][2200/2553]  lr: 2.2326e-03  eta: 7:16:47  time: 0.2804  data_time: 0.0025  memory: 5472  grad_norm: 2.8302  loss: 1.9376  loss_rpn_cls: 0.2359  loss_rpn_bbox: 0.6884  loss_rpn_dir: 0.0741  loss_semantic: 0.0940  loss_cls: 0.5151  loss_bbox: 0.2652  loss_corner: 0.0650
09/26 16:13:29 - mmengine - INFO - Epoch(train)  [4][2300/2553]  lr: 2.2565e-03  eta: 7:16:16  time: 0.2754  data_time: 0.0024  memory: 5457  grad_norm: 2.3868  loss: 1.8467  loss_rpn_cls: 0.2325  loss_rpn_bbox: 0.6568  loss_rpn_dir: 0.0792  loss_semantic: 0.0865  loss_cls: 0.5189  loss_bbox: 0.2122  loss_corner: 0.0607
09/26 16:13:40 - mmengine - INFO - Exp name: pv_rcnn_osdar23-3d_3class_20240926_152605
09/26 16:13:57 - mmengine - INFO - Epoch(train)  [4][2400/2553]  lr: 2.2806e-03  eta: 7:15:52  time: 0.2911  data_time: 0.0025  memory: 5454  grad_norm: 2.5979  loss: 2.0011  loss_rpn_cls: 0.2704  loss_rpn_bbox: 0.7041  loss_rpn_dir: 0.0643  loss_semantic: 0.1106  loss_cls: 0.5147  loss_bbox: 0.2518  loss_corner: 0.0852
09/26 16:14:26 - mmengine - INFO - Epoch(train)  [4][2500/2553]  lr: 2.3048e-03  eta: 7:15:23  time: 0.2809  data_time: 0.0023  memory: 5451  grad_norm: 1.9511  loss: 1.7839  loss_rpn_cls: 0.2204  loss_rpn_bbox: 0.6386  loss_rpn_dir: 0.0710  loss_semantic: 0.0841  loss_cls: 0.5104  loss_bbox: 0.2120  loss_corner: 0.0474
09/26 16:14:40 - mmengine - INFO - Exp name: pv_rcnn_osdar23-3d_3class_20240926_152605
09/26 16:14:40 - mmengine - INFO - Saving checkpoint at 4 epochs
/home/cws-ml-lab/.local/lib/python3.10/site-packages/mmdet/models/task_modules/samplers/sampling_result.py:132: UserWarning: DeprecationWarning: pos_bboxes is deprecated, please use "pos_priors" instead
  warnings.warn('DeprecationWarning: pos_bboxes is deprecated, '
/home/cws-ml-lab/.local/lib/python3.10/site-packages/mmdet/models/task_modules/samplers/sampling_result.py:126: UserWarning: DeprecationWarning: bboxes is deprecated, please use "priors" instead
  warnings.warn('DeprecationWarning: bboxes is deprecated, '
09/26 16:15:10 - mmengine - INFO - Epoch(train)  [5][ 100/2553]  lr: 2.3423e-03  eta: 7:14:38  time: 0.2855  data_time: 0.0023  memory: 5484  grad_norm: 2.0260  loss: 1.8442  loss_rpn_cls: 0.2508  loss_rpn_bbox: 0.6634  loss_rpn_dir: 0.0679  loss_semantic: 0.0960  loss_cls: 0.4983  loss_bbox: 0.2184  loss_corner: 0.0495
09/26 16:15:38 - mmengine - INFO - Epoch(train)  [5][ 200/2553]  lr: 2.3671e-03  eta: 7:14:07  time: 0.2842  data_time: 0.0024  memory: 5482  grad_norm: 2.0573  loss: 1.8795  loss_rpn_cls: 0.2467  loss_rpn_bbox: 0.6813  loss_rpn_dir: 0.0721  loss_semantic: 0.1006  loss_cls: 0.5091  loss_bbox: 0.2190  loss_corner: 0.0506
09/26 16:16:07 - mmengine - INFO - Epoch(train)  [5][ 300/2553]  lr: 2.3920e-03  eta: 7:13:36  time: 0.2805  data_time: 0.0024  memory: 5451  grad_norm: 1.9196  loss: 1.8320  loss_rpn_cls: 0.2425  loss_rpn_bbox: 0.6623  loss_rpn_dir: 0.0737  loss_semantic: 0.0853  loss_cls: 0.5000  loss_bbox: 0.2184  loss_corner: 0.0498
09/26 16:16:35 - mmengine - INFO - Epoch(train)  [5][ 400/2553]  lr: 2.4171e-03  eta: 7:13:09  time: 0.2849  data_time: 0.0025  memory: 5469  grad_norm: 2.0424  loss: 1.8327  loss_rpn_cls: 0.2384  loss_rpn_bbox: 0.6696  loss_rpn_dir: 0.0717  loss_semantic: 0.0864  loss_cls: 0.5058  loss_bbox: 0.2113  loss_corner: 0.0495
09/26 16:17:04 - mmengine - INFO - Epoch(train)  [5][ 500/2553]  lr: 2.4424e-03  eta: 7:12:40  time: 0.2862  data_time: 0.0025  memory: 5459  grad_norm: 2.4581  loss: 1.7645  loss_rpn_cls: 0.2249  loss_rpn_bbox: 0.6209  loss_rpn_dir: 0.0701  loss_semantic: 0.0781  loss_cls: 0.5038  loss_bbox: 0.2120  loss_corner: 0.0549
09/26 16:17:32 - mmengine - INFO - Epoch(train)  [5][ 600/2553]  lr: 2.4679e-03  eta: 7:12:11  time: 0.2847  data_time: 0.0024  memory: 5454  grad_norm: 2.0940  loss: 1.8522  loss_rpn_cls: 0.2353  loss_rpn_bbox: 0.6615  loss_rpn_dir: 0.0702  loss_semantic: 0.0958  loss_cls: 0.5168  loss_bbox: 0.2196  loss_corner: 0.0530
